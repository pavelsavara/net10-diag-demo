<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Private.Uri</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Generic.ArrayBuilder`1">
            <summary>
            Helper type for avoiding allocations while building arrays.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:System.Collections.Generic.ArrayBuilder`1.#ctor(System.Int32)">
            <summary>
            Initializes the <see cref="T:System.Collections.Generic.ArrayBuilder`1"/> with a specified capacity.
            </summary>
            <param name="capacity">The capacity of the array to allocate.</param>
        </member>
        <member name="P:System.Collections.Generic.ArrayBuilder`1.Capacity">
            <summary>
            Gets the number of items this instance can store without re-allocating,
            or 0 if the backing array is <c>null</c>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ArrayBuilder`1.Buffer">
            <summary>Gets the current underlying array.</summary>
        </member>
        <member name="P:System.Collections.Generic.ArrayBuilder`1.Count">
            <summary>
            Gets the number of items in the array currently in use.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.ArrayBuilder`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at a certain index in the array.
            </summary>
            <param name="index">The index into the array.</param>
        </member>
        <member name="M:System.Collections.Generic.ArrayBuilder`1.Add(`0)">
            <summary>
            Adds an item to the backing array, resizing it if necessary.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:System.Collections.Generic.ArrayBuilder`1.First">
            <summary>
            Gets the first item in this builder.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ArrayBuilder`1.Last">
            <summary>
            Gets the last item in this builder.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ArrayBuilder`1.ToArray">
            <summary>
            Creates an array from the contents of this builder.
            </summary>
            <remarks>
            Do not call this method twice on the same builder.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.ArrayBuilder`1.UncheckedAdd(`0)">
            <summary>
            Adds an item to the backing array, without checking if there is room.
            </summary>
            <param name="item">The item to add.</param>
            <remarks>
            Use this method if you know there is enough space in the <see cref="T:System.Collections.Generic.ArrayBuilder`1"/>
            for another item, and you are writing performance-sensitive code.
            </remarks>
        </member>
        <member name="P:System.HexConverter.CharToHexLookup">
            <summary>Map from an ASCII char to its hex value, e.g. arr['b'] == 11. 0xFF means it's not a hex digit.</summary>
        </member>
        <member name="M:System.DomainNameHelper.IdnEquivalent(System.String)">
            <summary>Converts a host name into its idn equivalent.</summary>
        </member>
        <member name="F:System.Uri.Flags.DisablePathAndQueryCanonicalization">
            <summary>
            Disables any validation/normalization past the authority. Fragments will always be empty. GetComponents will throw for Path/Query.
            </summary>
        </member>
        <member name="F:System.Uri.Flags.CustomParser_ParseMinimalAlreadyCalled">
            <summary>
            Used to ensure that InitializeAndValidate is only called once per Uri instance and only from an override of InitializeAndValidate
            </summary>
        </member>
        <member name="F:System.Uri.Flags.Debug_LeftConstructor">
            <summary>
            Used for asserting that certain methods are only called from the constructor to validate thread-safety assumptions
            </summary>
        </member>
        <member name="F:System.Uri.UriInfo.ScopeId">
            <summary>
            Only IP v6 may need this
            </summary>
        </member>
        <member name="M:System.Uri.#ctor(System.String,System.UriCreationOptions@)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Uri"/> class with the specified URI and additional <see cref="T:System.UriCreationOptions"/>.
            </summary>
            <param name="uriString">A string that identifies the resource to be represented by the <see cref="T:System.Uri"/> instance.</param>
            <param name="creationOptions">Options that control how the <seealso cref="T:System.Uri"/> is created and behaves.</param>
        </member>
        <member name="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <internalonly/>
        </member>
        <member name="M:System.Uri.HexEscape(System.Char)">
            Transforms a character into its hexadecimal representation.
        </member>
        <member name="M:System.Uri.TryFormat(System.Span{System.Char},System.Int32@)">
            <summary>
            Attempts to format a canonical string representation for the <see cref="T:System.Uri"/> instance into the specified span.
            </summary>
            <param name="destination">The span into which to write this instance's value formatted as a span of characters.</param>
            <param name="charsWritten">When this method returns, contains the number of characters that were written in <paramref name="destination"/>.</param>
            <returns><see langword="true"/> if the formatting was successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Uri.System#ISpanFormattable#TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:System.Uri.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:System.Uri.Equals(System.Uri)">
            <summary>
            Compares two <see cref="T:System.Uri"/> instances for equality.
            </summary>
            <param name="other">The <see cref="T:System.Uri"/> to compare to this instance.</param>
            <returns><see langword="true"/> if the two instances represent the same URI; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Uri.Canonicalize">
            <internalonly/>
        </member>
        <member name="M:System.Uri.Parse">
            <internalonly/>
        </member>
        <member name="M:System.Uri.Escape">
            <internalonly/>
        </member>
        <member name="M:System.Uri.Unescape(System.String)">
            <internalonly/>
        </member>
        <member name="M:System.Uri.CheckSecurity">
            <internalonly/>
        </member>
        <member name="M:System.Uri.IsReservedCharacter(System.Char)">
            <internalonly/>
        </member>
        <member name="M:System.Uri.IsExcludedCharacter(System.Char)">
            <internalonly/>
        </member>
        <member name="F:System.Uri.s_asciiOtherThanPercent">
            <summary>SearchValues for all ASCII characters other than %</summary>
        </member>
        <member name="M:System.Uri.CheckForUnicodeOrEscapedUnreserved(System.String)">
            <summary>
            Unescapes entire string and checks if it has unicode chars.Also checks for sequences that are 3986 Unreserved characters as these should be un-escaped
            </summary>
        </member>
        <member name="M:System.Uri.TryCreate(System.String,System.UriCreationOptions@,System.Uri@)">
            <summary>
            Creates a new <see cref="T:System.Uri"/> using the specified <see cref="T:System.String"/> instance and <see cref="T:System.UriCreationOptions"/>.
            </summary>
            <param name="uriString">The string representation of the <see cref="T:System.Uri"/>.</param>
            <param name="creationOptions">Options that control how the <seealso cref="T:System.Uri"/> is created and behaves.</param>
            <param name="result">The constructed <see cref="T:System.Uri"/>.</param>
            <returns><see langword="true"/> if the <see cref="T:System.Uri"/> was successfully created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Uri.UnescapeDataString(System.String)">
            <summary>Converts a string to its unescaped representation.</summary>
            <param name="stringToUnescape">The string to unescape.</param>
            <returns>The unescaped representation of <paramref name="stringToUnescape"/>.</returns>
        </member>
        <member name="M:System.Uri.UnescapeDataString(System.ReadOnlySpan{System.Char})">
            <summary>Converts a span to its unescaped representation.</summary>
            <param name="charsToUnescape">The span to unescape.</param>
            <returns>The unescaped representation of <paramref name="charsToUnescape"/>.</returns>
        </member>
        <member name="M:System.Uri.TryUnescapeDataString(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <summary>Attempts to convert a span to its unescaped representation.</summary>
            <param name="charsToUnescape">The span to unescape.</param>
            <param name="destination">The output span that contains the unescaped result of the operation.</param>
            <param name="charsWritten">When this method returns, contains the number of chars that were written into <paramref name="destination"/>.</param>
            <returns><see langword="true"/> if the <paramref name="destination"/> was large enough to hold the entire result; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:System.Uri.EscapeDataString(System.String)">
            <summary>Converts a string to its escaped representation.</summary>
            <param name="stringToEscape">The string to escape.</param>
            <returns>The escaped representation of <paramref name="stringToEscape"/>.</returns>
        </member>
        <member name="M:System.Uri.EscapeDataString(System.ReadOnlySpan{System.Char})">
            <summary>Converts a span to its escaped representation.</summary>
            <param name="charsToEscape">The span to escape.</param>
            <returns>The escaped representation of <paramref name="charsToEscape"/>.</returns>
        </member>
        <member name="M:System.Uri.TryEscapeDataString(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Int32@)">
            <summary>Attempts to convert a span to its escaped representation.</summary>
            <param name="charsToEscape">The span to escape.</param>
            <param name="destination">The output span that contains the escaped result of the operation.</param>
            <param name="charsWritten">When this method returns, contains the number of chars that were written into <paramref name="destination"/>.</param>
            <returns><see langword="true"/> if the <paramref name="destination"/> was large enough to hold the entire result; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:System.UriCreationOptions">
            <summary>
            Options that control how a <seealso cref="T:System.Uri"/> is created and behaves.
            </summary>
        </member>
        <member name="P:System.UriCreationOptions.DangerousDisablePathAndQueryCanonicalization">
            <summary>
            Disables validation and normalization of the Path and Query.
            No transformations of the URI past the Authority will take place.
            <see cref="T:System.Uri"/> instances created with this option do not support <see cref="P:System.Uri.Fragment"/>s.
            <see cref="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)"/> may not be used for <see cref="F:System.UriComponents.Path"/> or <see cref="F:System.UriComponents.Query"/>.
            Be aware that disabling canonicalization also means that reserved characters will not be escaped,
            which may corrupt the HTTP request and makes the application subject to request smuggling.
            Only set this option if you have ensured that the URI string is already sanitized.
            </summary>
        </member>
        <member name="T:System.UriFormatException">
            <summary>
            An exception class used when an invalid Uniform Resource Identifier is detected.
            </summary>
        </member>
        <member name="M:System.UriHelper.DecodeHexChars(System.Int32,System.Int32)">
            <summary>
            Converts 2 hex chars to a byte (returned in a char), e.g, "0a" becomes (char)0x0A.
            <para>If either char is not hex, returns <see cref="F:System.Uri.c_DummyChar"/>.</para>
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetPinnableReference">
            <summary>
            Get a pinnable reference to the builder.
            Does not ensure there is a null char after <see cref="P:System.Text.ValueStringBuilder.Length"/>
            This overload is pattern matched in the C# 7.3+ compiler so you can omit
            the explicit method call, and write eg "fixed (char* c = builder)"
            </summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.GetPinnableReference(System.Boolean)">
            <summary>
            Get a pinnable reference to the builder.
            </summary>
            <param name="terminate">Ensures that the builder has a null char after <see cref="P:System.Text.ValueStringBuilder.Length"/></param>
        </member>
        <member name="P:System.Text.ValueStringBuilder.RawChars">
            <summary>Returns the underlying storage of the builder.</summary>
        </member>
        <member name="M:System.Text.ValueStringBuilder.AsSpan(System.Boolean)">
            <summary>
            Returns a span around the contents of the builder.
            </summary>
            <param name="terminate">Ensures that the builder has a null char after <see cref="P:System.Text.ValueStringBuilder.Length"/></param>
        </member>
        <member name="M:System.Text.ValueStringBuilder.Grow(System.Int32)">
            <summary>
            Resize the internal buffer either by doubling current buffer size or
            by adding <paramref name="additionalCapacityBeyondPos"/> to
            <see cref="F:System.Text.ValueStringBuilder._pos"/> whichever is greater.
            </summary>
            <param name="additionalCapacityBeyondPos">
            Number of chars requested beyond current position.
            </param>
        </member>
        <member name="P:System.SR.Argument_AddingDuplicate">
            <summary>An item with the same key has already been added. Key: {0}</summary>
        </member>
        <member name="P:System.SR.net_uri_BadAuthority">
            <summary>Invalid URI: The Authority/Host could not be parsed.</summary>
        </member>
        <member name="P:System.SR.net_uri_BadAuthorityTerminator">
            <summary>Invalid URI: The Authority/Host cannot end with a backslash character ('\\').</summary>
        </member>
        <member name="P:System.SR.net_uri_BadFormat">
            <summary>Invalid URI: The format of the URI could not be determined.</summary>
        </member>
        <member name="P:System.SR.net_uri_NeedFreshParser">
            <summary>The URI parser instance passed into 'uriParser' parameter is already registered with the scheme name '{0}'.</summary>
        </member>
        <member name="P:System.SR.net_uri_AlreadyRegistered">
            <summary>A URI scheme name '{0}' already has a registered custom parser.</summary>
        </member>
        <member name="P:System.SR.net_uri_BadHostName">
            <summary>Invalid URI: The hostname could not be parsed.</summary>
        </member>
        <member name="P:System.SR.net_uri_BadPort">
            <summary>Invalid URI: Invalid port specified.</summary>
        </member>
        <member name="P:System.SR.net_uri_BadScheme">
            <summary>Invalid URI: The URI scheme is not valid.</summary>
        </member>
        <member name="P:System.SR.net_uri_BadUserPassword">
            <summary>Invalid URI: The username:password construct is badly formed.</summary>
        </member>
        <member name="P:System.SR.net_uri_CannotCreateRelative">
            <summary>A relative URI cannot be created because the 'uriString' parameter represents an absolute URI.</summary>
        </member>
        <member name="P:System.SR.net_uri_SchemeLimit">
            <summary>Invalid URI: The Uri scheme is too long.</summary>
        </member>
        <member name="P:System.SR.net_uri_EmptyUri">
            <summary>Invalid URI: The URI is empty.</summary>
        </member>
        <member name="P:System.SR.net_uri_InvalidUriKind">
            <summary>The value '{0}' passed for the UriKind parameter is invalid.</summary>
        </member>
        <member name="P:System.SR.net_uri_MustRootedPath">
            <summary>Invalid URI: A Dos path must be rooted, for example, 'c:\\'.</summary>
        </member>
        <member name="P:System.SR.net_uri_NotAbsolute">
            <summary>This operation is not supported for a relative URI.</summary>
        </member>
        <member name="P:System.SR.net_uri_PortOutOfRange">
            <summary>A derived type '{0}' has reported an invalid value for the Uri port '{1}'.</summary>
        </member>
        <member name="P:System.SR.net_uri_SizeLimit">
            <summary>Invalid URI: The Uri string is too long.</summary>
        </member>
        <member name="P:System.SR.net_uri_UserDrivenParsing">
            <summary>A derived type '{0}' is responsible for parsing this Uri instance. The base implementation must not be used.</summary>
        </member>
        <member name="P:System.SR.net_uri_NotJustSerialization">
            <summary>UriComponents.SerializationInfoString must not be combined with other UriComponents.</summary>
        </member>
        <member name="P:System.SR.net_uri_BadUnicodeHostForIdn">
            <summary>An invalid Unicode character by IDN standards was specified in the host.</summary>
        </member>
        <member name="P:System.SR.Argument_ExtraNotValid">
            <summary>Extra portion of URI not valid.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidUriSubcomponent">
            <summary>The subcomponent, {0}, of this uri is not valid.</summary>
        </member>
        <member name="P:System.SR.Arg_KeyNotFoundWithKey">
            <summary>The given key '{0}' was not present in the dictionary.</summary>
        </member>
        <member name="P:System.SR.InvalidNullArgument">
            <summary>Null is not a valid value for {0}.</summary>
        </member>
        <member name="P:System.SR.net_uri_InitializeCalledAlreadyOrTooLate">
            <summary>UriParser's base InitializeAndValidate may only be called once on a single Uri instance and only from an override of InitializeAndValidate.</summary>
        </member>
        <member name="P:System.SR.net_uri_GetComponentsCalledWhenCanonicalizationDisabled">
            <summary>GetComponents() may not be used for Path/Query on a Uri instance created with UriCreationOptions.DangerousDisablePathAndQueryCanonicalization.</summary>
        </member>
    </members>
</doc>
