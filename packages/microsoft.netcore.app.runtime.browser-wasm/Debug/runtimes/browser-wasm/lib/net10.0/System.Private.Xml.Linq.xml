<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Private.Xml.Linq</name>
    </assembly>
    <members>
        <member name="T:System.Collections.Generic.EnumerableHelpers">
            <summary>
            Internal helper functions for working with enumerables.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableHelpers.Reset``1(``0@)">
            <summary>Calls Reset on an enumerator instance.</summary>
            <remarks>Enables Reset to be called without boxing on a struct enumerator that lacks a public Reset.</remarks>
        </member>
        <member name="M:System.Collections.Generic.EnumerableHelpers.GetEmptyEnumerator``1">
            <summary>Gets an enumerator singleton for an empty collection.</summary>
        </member>
        <member name="M:System.Collections.Generic.EnumerableHelpers.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>Converts an enumerable to an array using the same logic as List{T}.</summary>
            <param name="source">The enumerable to convert.</param>
            <param name="length">The number of items stored in the resulting array, 0-indexed.</param>
            <returns>
            The resulting array.  The length of the array may be greater than <paramref name="length"/>,
            which is the actual number of elements in the array.
            </returns>
        </member>
        <member name="T:System.Text.StringBuilderCache">
            <summary>Provide a cached reusable instance of stringbuilder per thread.</summary>
        </member>
        <member name="M:System.Text.StringBuilderCache.Acquire(System.Int32)">
            <summary>Get a StringBuilder for the specified capacity.</summary>
            <remarks>If a StringBuilder of an appropriate size is cached, it will be returned and the cache emptied.</remarks>
        </member>
        <member name="M:System.Text.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>Place the specified builder in the cache if it is not too big.</summary>
        </member>
        <member name="M:System.Text.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>ToString() the stringbuilder, Release it to the cache, and return the resulting string.</summary>
        </member>
        <member name="T:System.Xml.Linq.Extensions">
            <summary>
            Defines the LINQ to XML extension methods.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Returns all of the <see cref="T:System.Xml.Linq.XAttribute"/>s for each <see cref="T:System.Xml.Linq.XElement"/> of
            this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XAttribute"/> containing the XML
            Attributes for every <see cref="T:System.Xml.Linq.XElement"/> in the target <see cref="T:System.Collections.IEnumerable"/>
            of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/>s that have a matching <see cref="T:System.Xml.Linq.XName"/>.  Each
            <see cref="T:System.Xml.Linq.XElement"/>'s <see cref="T:System.Xml.Linq.XAttribute"/>s in the target <see cref="T:System.Collections.IEnumerable"/>
            of <see cref="T:System.Xml.Linq.XElement"/> are scanned for a matching <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XAttribute"/> containing the XML
            Attributes with a matching <see cref="T:System.Xml.Linq.XName"/> for every <see cref="T:System.Xml.Linq.XElement"/> in
            the target <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the ancestors (parent
            and it's parent up to the root) of each of the <see cref="T:System.Xml.Linq.XElement"/>s in this
            <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the ancestors (parent
            and it's parent up to the root) of each of the <see cref="T:System.Xml.Linq.XElement"/>s in this
            <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the ancestors (parent
            and it's parent up to the root) that have a matching <see cref="T:System.Xml.Linq.XName"/>.  This is done for each
            <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the ancestors (parent
            and it's parent up to the root) that have a matching <see cref="T:System.Xml.Linq.XName"/>.  This is done for each
            <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's ancestors (parent and it's parent up to the root).
            This is done for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of
            <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's ancestors (parent and it's parent up to the root).
            This is done for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of
            <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's ancestors (parent and it's parent up to the root)
            that match the passed in <see cref="T:System.Xml.Linq.XName"/>.  This is done for each
            <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's ancestors (parent and it's parent up to the root)
            that match the passed in <see cref="T:System.Xml.Linq.XName"/>.  This is done for each
            <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XNode"/> over the content of a set of nodes
            </summary>
        </member>
        <member name="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XNode"/> over the descendants of a set of nodes
            </summary>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the descendants (children
            and their children down to the leaf level).  This is done for each <see cref="T:System.Xml.Linq.XElement"/> in
            this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the descendants (children
            and their children down to the leaf level).  This is done for each <see cref="T:System.Xml.Linq.XElement"/> in
            this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the descendants (children
            and their children down to the leaf level) that have a matching <see cref="T:System.Xml.Linq.XName"/>.  This is done
            for each <see cref="T:System.Xml.Linq.XElement"/> in the target <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the descendants (children
            and their children down to the leaf level) that have a matching <see cref="T:System.Xml.Linq.XName"/>.  This is done
            for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's descendants
            that match the passed in <see cref="T:System.Xml.Linq.XName"/>.  This is done for each
            <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and descendants.
            This is done for each
            <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's descendants (children and children's children down
            to the leaf nodes).  This is done for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/>
            of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's descendants (children and children's children down
            to the leaf nodes).  This is done for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/>
            of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's descendants (children and children's children down
            to the leaf nodes) that match the passed in <see cref="T:System.Xml.Linq.XName"/>.  This is done for
            each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            <see cref="T:System.Xml.Linq.XElement"/> and it's descendants (children and children's children down
            to the leaf nodes) that match the passed in <see cref="T:System.Xml.Linq.XName"/>.  This is done for
            each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the child elements
            for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the child elements
            for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the child elements
            with a matching for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the child elements
            for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the child elements
            with a matching for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the child elements
            for each <see cref="T:System.Xml.Linq.XElement"/> in this <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            in document order
            </returns>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})">
            <summary>
            Removes each <see cref="T:System.Xml.Linq.XAttribute"/> represented in this <see cref="T:System.Collections.IEnumerable"/> of
            <see cref="T:System.Xml.Linq.XAttribute"/>.  Note that this method uses snapshot semantics (copies the
            attributes to an array before deleting each).
            </summary>
        </member>
        <member name="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes each <see cref="T:System.Xml.Linq.XNode"/> represented in this <see cref="T:System.Collections.IEnumerable"/>
            T which must be a derived from <see cref="T:System.Xml.Linq.XNode"/>.  Note that this method uses snapshot semantics
            (copies the <see cref="T:System.Xml.Linq.XNode"/>s to an array before deleting each).
            </summary>
        </member>
        <member name="T:System.Xml.Linq.LineInfoAnnotation">
            <summary>
            Instance of this class is used as an annotation on any node
            for which we want to store its line information.
            Note: on XElement nodes this annotation stores the line info
              for the element start tag. The matching end tag line info
              if present is stored using the LineInfoEndElementAnnotation
              instance annotation.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.LineInfoEndElementAnnotation">
            <summary>
            Instance of this class is used as an annotation on XElement nodes
            if that element is not empty element and we want to store the line info
            for its end element tag.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XAttribute">
            <summary>
            Represents an XML attribute.
            </summary>
            <remarks>
            An XML attribute is a name/value pair associated with an XML element.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XAttribute.EmptySequence">
            <summary>
            Gets an empty collection of attributes.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)">
            <overloads>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute"/> class from
            the specified name and value.
            </summary>
            <param name="name">
            The name of the attribute.
            </param>
            <param name="value">
            The value of the attribute.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the passed in name or value are null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)">
            <summary>
            Initializes an instance of the XAttribute class
            from another XAttribute object.
            </summary>
            <param name="other"><see cref="T:System.Xml.Linq.XAttribute"/> object to copy from.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified <see cref="T:System.Xml.Linq.XAttribute"/> is null.
            </exception>
        </member>
        <member name="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration">
            <summary>
            Gets a value indicating if this attribute is a namespace declaration.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XAttribute.Name">
            <summary>
            Gets the name of this attribute.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XAttribute.NextAttribute">
            <summary>
            Gets the next attribute of the parent element.
            </summary>
            <remarks>
            If this attribute does not have a parent, or if there is no next attribute,
            then this property returns null.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XAttribute.NodeType">
            <summary>
            Gets the node type for this node.
            </summary>
            <remarks>
            This property will always return XmlNodeType.Attribute.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XAttribute.PreviousAttribute">
            <summary>
            Gets the previous attribute of the parent element.
            </summary>
            <remarks>
            If this attribute does not have a parent, or if there is no previous attribute,
            then this property returns null.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XAttribute.Value">
            <summary>
            Gets or sets the value of this attribute.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the value set is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.Remove">
            <summary>
            Deletes this XAttribute.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the parent element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.SetValue(System.Object)">
            <summary>
            Sets the value of this <see cref="T:System.Xml.Linq.XAttribute"/>.
            <seealso cref="M:System.Xml.Linq.XElement.SetValue(System.Object)"/>
            <seealso cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)"/>
            <seealso cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)"/>
            </summary>
            <param name="value">
            The value to assign to this attribute. The value is converted to its string
            representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value"/> property.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified value is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.ToString">
            <summary>
            Override for <see cref="M:System.Xml.Linq.XAttribute.ToString"/> on <see cref="T:System.Xml.Linq.XAttribute"/>
            </summary>
            <returns>XML text representation of an attribute and its value</returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.String"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.String"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Boolean"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Boolean"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Boolean"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Boolean"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Boolean"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Int32"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as an <see cref="T:System.Int32"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to an <see cref="T:System.Int32"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Int32"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as an <see cref="T:System.Int32"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.UInt32"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as an <see cref="T:System.UInt32"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to an <see cref="T:System.UInt32"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.UInt32"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as an <see cref="T:System.UInt32"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Int64"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Int64"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Int64"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Int64"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Int64"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to an <see cref="T:System.UInt64"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.UInt64"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as an <see cref="T:System.UInt64"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to an <see cref="T:System.UInt64"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.UInt64"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as an <see cref="T:System.UInt64"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Single"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Single"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Single"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Single"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Single"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Single"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Double"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Double"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Double"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Double"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Double"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Double"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Decimal"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Decimal"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Decimal"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Decimal"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Decimal"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.DateTime"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.DateTime"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.DateTime"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.DateTime"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.DateTime"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.DateTimeOffset"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.DateTimeOffset"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.DateTimeOffset"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.DateTimeOffset"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.DateTimeOffset"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.TimeSpan"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.TimeSpan"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.TimeSpan"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.TimeSpan"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.TimeSpan"/>?.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Guid"/>.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Guid"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Guid"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified attribute is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XAttribute"/> to a <see cref="T:System.Guid"/>?.
            </summary>
            <param name="attribute">
            The <see cref="T:System.Xml.Linq.XAttribute"/> to cast to <see cref="T:System.Guid"/>?. Can be null.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XAttribute"/> as a <see cref="T:System.Guid"/>?.
            </returns>
        </member>
        <member name="T:System.Xml.Linq.XCData">
            <summary>
            Represents a text node that contains CDATA.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XCData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XCData class.
            </summary>
            <param name="value">The string that contains the value of the XCData node.</param>
        </member>
        <member name="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
            <summary>
            Initializes a new instance of the XCData class from another XCData object.
            </summary>
            <param name="other">Text node to copy from</param>
        </member>
        <member name="P:System.Xml.Linq.XCData.NodeType">
            <summary>
            Gets the node type for this node.
            </summary>
            <remarks>
            This property will always return XmlNodeType.CDATA.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XCData"/> to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XCData"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XCData.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XCData"/> to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XCData"/> to.
            </param>
            <param name="cancellationToken">
            The CancellationToken to use to request cancellation of this operation.
            </param>
            <returns>
            A Task that represents the eventual completion of the operation.
            </returns>
        </member>
        <member name="T:System.Xml.Linq.XComment">
            <summary>
            Represents an XML comment.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XComment.#ctor(System.String)">
            <overloads>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment"/> class.
            </overloads>
            <summary>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment"/> class with the
            specified string content.
            </summary>
            <param name="value">
            The contents of the new XComment object.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified value is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XComment.#ctor(System.Xml.Linq.XComment)">
            <summary>
            Initializes a new comment node from an existing comment node.
            </summary>
            <param name="other">Comment node to copy from.</param>
        </member>
        <member name="P:System.Xml.Linq.XComment.NodeType">
            <summary>
            Gets the node type for this node.
            </summary>
            <remarks>
            This property will always return XmlNodeType.Comment.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XComment.Value">
            <summary>
            Gets or sets the string value of this comment.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified value is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XComment.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XComment"/> to the passed in <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XComment"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XComment.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XComment"/> to the passed in <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XComment"/> to.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="T:System.Xml.Linq.XContainer">
            <summary>
            Represents a node that can contain other nodes.
            </summary>
            <remarks>
            The two classes that derive from <see cref="T:System.Xml.Linq.XContainer"/> are
            <see cref="T:System.Xml.Linq.XDocument"/> and <see cref="T:System.Xml.Linq.XElement"/>.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XContainer.FirstNode">
            <summary>
            Get the first child node of this node.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XContainer.LastNode">
            <summary>
            Get the last child node of this node.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XContainer.Add(System.Object)">
             <overloads>
             Adds the specified content as a child (or as children) to this <see cref="T:System.Xml.Linq.XContainer"/>. The
             content can be simple content, a collection of content objects, a parameter list
             of content objects, or null.
             </overloads>
             <summary>
             Adds the specified content as a child (or children) of this <see cref="T:System.Xml.Linq.XContainer"/>.
             </summary>
             <param name="content">
             A content object containing simple content or a collection of content objects
             to be added.
             </param>
             <remarks>
             When adding simple content, a number of types may be passed to this method.
             Valid types include:
             <list>
             <item>string</item>
             <item>double</item>
             <item>float</item>
             <item>decimal</item>
             <item>bool</item>
             <item>DateTime</item>
             <item>DateTimeOffset</item>
             <item>TimeSpan</item>
             <item>Any type implementing ToString()</item>
             <item>Any type implementing IEnumerable</item>
            
             </list>
             When adding complex content, a number of types may be passed to this method.
             <list>
             <item>XObject</item>
             <item>XNode</item>
             <item>XAttribute</item>
             <item>Any type implementing IEnumerable</item>
             </list>
            
             If an object implements IEnumerable, then the collection in the object is enumerated,
             and all items in the collection are added. If the collection contains simple content,
             then the simple content in the collection is concatenated and added as a single
             string of simple content. If the collection contains complex content, then each item
             in the collection is added separately.
            
             If content is null, nothing is added. This allows the results of a query to be passed
             as content. If the query returns null, no contents are added, and this method does not
             throw a NullReferenceException.
            
             Attributes and simple content can't be added to a document.
            
             An added attribute must have a unique name within the element to
             which it is being added.
             </remarks>
        </member>
        <member name="M:System.Xml.Linq.XContainer.Add(System.Object[])">
            <summary>
            Adds the specified content as a child (or children) of this <see cref="T:System.Xml.Linq.XContainer"/>.
            </summary>
            <param name="content">
            A parameter list of content objects.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object)">
            <overloads>
            Adds the specified content as the first child (or children) of this document or element. The
            content can be simple content, a collection of content objects, a parameter
            list of content objects, or null.
            </overloads>
            <summary>
            Adds the specified content as the first child (or children) of this document or element.
            </summary>
            <param name="content">
            A content object containing simple content or a collection of content objects
            to be added.
            </param>
            <remarks>
            See <see cref="M:System.Xml.Linq.XContainer.Add(System.Object)"/> for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])">
            <summary>
            Adds the specified content as the first children of this document or element.
            </summary>
            <param name="content">
            A parameter list of content objects.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the parent is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:System.Xml.XmlWriter"/> used to add either nodes
            or attributes to the <see cref="T:System.Xml.Linq.XContainer"/>. The later option
            applies only for <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <returns>An <see cref="T:System.Xml.XmlWriter"/></returns>
        </member>
        <member name="M:System.Xml.Linq.XContainer.DescendantNodes">
            <summary>
            Get descendant elements plus leaf nodes contained in an <see cref="T:System.Xml.Linq.XContainer"/>
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> over all descendants</returns>
        </member>
        <member name="M:System.Xml.Linq.XContainer.Descendants">
            <summary>
            Returns the descendant <see cref="T:System.Xml.Linq.XElement"/>s of this <see cref="T:System.Xml.Linq.XContainer"/>.  Note this method will
            not return itself in the resulting IEnumerable.  See <see cref="M:System.Xml.Linq.XElement.DescendantsAndSelf"/> if you
            need to include the current <see cref="T:System.Xml.Linq.XElement"/> in the results.
            <seealso cref="M:System.Xml.Linq.XElement.DescendantsAndSelf"/>
            </summary>
            <returns>
            An IEnumerable of <see cref="T:System.Xml.Linq.XElement"/> with all of the descendants below this <see cref="T:System.Xml.Linq.XContainer"/> in the XML tree.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)">
            <summary>
            Returns the Descendant <see cref="T:System.Xml.Linq.XElement"/>s with the passed in <see cref="T:System.Xml.Linq.XName"/> as an IEnumerable
            of XElement.
            </summary>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> to match against descendant <see cref="T:System.Xml.Linq.XElement"/>s.</param>
            <returns>An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/></returns>
        </member>
        <member name="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)">
            <summary>
            Returns the child element with this <see cref="T:System.Xml.Linq.XName"/> or null if there is no child element
            with a matching <see cref="T:System.Xml.Linq.XName"/>.
            <seealso cref="M:System.Xml.Linq.XContainer.Elements"/>
            </summary>
            <param name="name">
            The <see cref="T:System.Xml.Linq.XName"/> to match against this <see cref="T:System.Xml.Linq.XContainer"/>s child elements.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XElement"/> child that matches the <see cref="T:System.Xml.Linq.XName"/> passed in, or null.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XContainer.Elements">
            <overloads>
             Returns the child <see cref="T:System.Xml.Linq.XElement"/>s of this <see cref="T:System.Xml.Linq.XContainer"/>.
             </overloads>
             <summary>
             Returns all of the child elements of this <see cref="T:System.Xml.Linq.XContainer"/>.
             </summary>
             <returns>
             An <see cref="T:System.Collections.IEnumerable"/> over all of this <see cref="T:System.Xml.Linq.XContainer"/>'s child <see cref="T:System.Xml.Linq.XElement"/>s.
             </returns>
        </member>
        <member name="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)">
            <summary>
            Returns the child elements of this <see cref="T:System.Xml.Linq.XContainer"/> that match the <see cref="T:System.Xml.Linq.XName"/> passed in.
            </summary>
            <param name="name">
            The <see cref="T:System.Xml.Linq.XName"/> to match against the <see cref="T:System.Xml.Linq.XElement"/> children of this <see cref="T:System.Xml.Linq.XContainer"/>.
            </param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> children of this <see cref="T:System.Xml.Linq.XContainer"/> that have
            a matching <see cref="T:System.Xml.Linq.XName"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XContainer.Nodes">
            <overloads>
             Returns the content of this <see cref="T:System.Xml.Linq.XContainer"/>.  Note that the content does not
             include <see cref="T:System.Xml.Linq.XAttribute"/>s.
             <seealso cref="M:System.Xml.Linq.XElement.Attributes"/>
             </overloads>
             <summary>
             Returns the content of this <see cref="T:System.Xml.Linq.XContainer"/> as an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Object"/>.  Note
             that the content does not include <see cref="T:System.Xml.Linq.XAttribute"/>s.
             <seealso cref="M:System.Xml.Linq.XElement.Attributes"/>
             </summary>
             <returns>The contents of this <see cref="T:System.Xml.Linq.XContainer"/></returns>
        </member>
        <member name="M:System.Xml.Linq.XContainer.RemoveNodes">
            <summary>
            Removes the nodes from this <see cref="T:System.Xml.Linq.XContainer"/>.  Note this
            methods does not remove attributes.  See <see cref="M:System.Xml.Linq.XElement.RemoveAttributes"/>.
            <seealso cref="M:System.Xml.Linq.XElement.RemoveAttributes"/>
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)">
            <overloads>
            Replaces the children nodes of this document or element with the specified content. The
            content can be simple content, a collection of content objects, a parameter
            list of content objects, or null.
            </overloads>
            <summary>
            Replaces the children nodes of this document or element with the specified content.
            </summary>
            <param name="content">
            A content object containing simple content or a collection of content objects
            that replace the children nodes.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])">
            <summary>
            Replaces the children nodes of this document or element with the specified content.
            </summary>
            <param name="content">
            A parameter list of content objects.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="T:System.Xml.Linq.XDeclaration">
            <summary>
            Represents an XML declaration.
            </summary>
            <remarks>
            An XML declaration is used to declare the XML version,
            the encoding, and whether or not the XML document is standalone.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration"/> class from the
            specified version, encoding, and standalone properties.
            </summary>
            <param name="version">
            The version of the XML, usually "1.0".
            </param>
            <param name="encoding">
            The encoding for the XML document.
            </param>
            <param name="standalone">
            Specifies whether the XML is standalone or requires external entities
            to be resolved.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.Xml.Linq.XDeclaration)">
            <summary>
            Initializes an instance of the <see cref="T:System.Xml.Linq.XDeclaration"/> class
            from another <see cref="T:System.Xml.Linq.XDeclaration"/> object.
            </summary>
            <param name="other">
            The <see cref="T:System.Xml.Linq.XDeclaration"/> used to initialize this <see cref="T:System.Xml.Linq.XDeclaration"/> object.
            </param>
        </member>
        <member name="P:System.Xml.Linq.XDeclaration.Encoding">
            <summary>
            Gets or sets the encoding for this document.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XDeclaration.Standalone">
            <summary>
            Gets or sets the standalone property for this document.
            </summary>
            <remarks>
            The valid values for standalone are "yes" or "no".
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XDeclaration.Version">
            <summary>
            Gets or sets the version property for this document.
            </summary>
            <remarks>
            The value is usually "1.0".
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XDeclaration.ToString">
            <summary>
            Provides a formatted string.
            </summary>
            <returns>A formatted XML string.</returns>
        </member>
        <member name="T:System.Xml.Linq.XDocument">
            <summary>
            Represents an XML document.
            </summary>
            <remarks>
            An <see cref="T:System.Xml.Linq.XDocument"/> can contain:
            <list>
              <item>
              A Document Type Declaration (DTD), see <see cref="T:System.Xml.Linq.XDocumentType"/>
              </item>
              <item>One root element.</item>
              <item>Zero or more <see cref="T:System.Xml.Linq.XComment"/> objects.</item>
              <item>Zero or more <see cref="T:System.Xml.Linq.XProcessingInstruction"/> objects.</item>
            </list>
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XDocument.#ctor">
            <overloads>
             Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"/> class.
             Overloaded constructors are provided for creating a new empty
             <see cref="T:System.Xml.Linq.XDocument"/>, creating an <see cref="T:System.Xml.Linq.XDocument"/> with
             a parameter list of initial content, and as a copy of another
             <see cref="T:System.Xml.Linq.XDocument"/> object.
             </overloads>
             <summary>
             Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"/> class.
             </summary>
        </member>
        <member name="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"/> class with the specified content.
            </summary>
            <param name="content">
            A parameter list of content objects to add to this document.
            </param>
            <remarks>
            Valid content includes:
            <list>
            <item>Zero or one <see cref="T:System.Xml.Linq.XDocumentType"/> objects</item>
            <item>Zero or one elements</item>
            <item>Zero or more comments</item>
            <item>Zero or more processing instructions</item>
            </list>
            See <see cref="M:System.Xml.Linq.XContainer.Add(System.Object)"/> for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"/> class
            with the specified <see cref="T:System.Xml.Linq.XDeclaration"/> and content.
            </summary>
            <param name="declaration">
            The XML declaration for the document.
            </param>
            <param name="content">
            The contents of the document.
            </param>
            <remarks>
            Valid content includes:
            <list>
            <item>Zero or one <see cref="T:System.Xml.Linq.XDocumentType"/> objects</item>
            <item>Zero or one elements</item>
            <item>Zero or more comments</item>
            <item>Zero or more processing instructions</item>
            <item></item>
            </list>
            See <see cref="M:System.Xml.Linq.XContainer.Add(System.Object)"/> for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument"/> class from an
            existing XDocument object.
            </summary>
            <param name="other">
            The <see cref="T:System.Xml.Linq.XDocument"/> object that will be copied.
            </param>
        </member>
        <member name="P:System.Xml.Linq.XDocument.Declaration">
            <summary>
            Gets the XML declaration for this document.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XDocument.DocumentType">
            <summary>
            Gets the Document Type Definition (DTD) for this document.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XDocument.NodeType">
            <summary>
            Gets the node type for this node.
            </summary>
            <remarks>
            This property will always return XmlNodeType.Document.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XDocument.Root">
            <summary>
            Gets the root element of the XML Tree for this document.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Load(System.String)">
            <overloads>
            The Load method provides multiple strategies for creating a new
            <see cref="T:System.Xml.Linq.XDocument"/> and initializing it from a data source containing
            raw XML.  Load from a file (passing in a URI to the file), a
            <see cref="T:System.IO.Stream"/>, a <see cref="T:System.IO.TextReader"/>, or an
            <see cref="T:System.Xml.XmlReader"/>.  Note:  Use <see cref="M:System.Xml.Linq.XDocument.Parse(System.String)"/>
            to create an <see cref="T:System.Xml.Linq.XDocument"/> from a string containing XML.
            <seealso cref="M:System.Xml.Linq.XDocument.Parse(System.String)"/>
            </overloads>
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> based on the contents of the file
            referenced by the URI parameter passed in.  Note: Use
            <see cref="M:System.Xml.Linq.XDocument.Parse(System.String)"/> to create an <see cref="T:System.Xml.Linq.XDocument"/> from
            a string containing XML.
            <seealso cref="M:System.Xml.XmlReader.Create(System.String)"/>
            <seealso cref="M:System.Xml.Linq.XDocument.Parse(System.String)"/>
            </summary>
            <remarks>
            This method uses the <see cref="M:System.Xml.XmlReader.Create(System.String)"/> method to create
            an <see cref="T:System.Xml.XmlReader"/> to read the raw XML into the underlying
            XML tree.
            </remarks>
            <param name="uri">
            A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XDocument"/> initialized with the contents of the file referenced
            in the passed in uri parameter.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> based on the contents of the file
            referenced by the URI parameter passed in.  Optionally, whitespace can be preserved.
            <see cref="M:System.Xml.XmlReader.Create(System.String)"/>
            </summary>
            <remarks>
            This method uses the <see cref="M:System.Xml.XmlReader.Create(System.String)"/> method to create
            an <see cref="T:System.Xml.XmlReader"/> to read the raw XML into an underlying
            XML tree.  If LoadOptions.PreserveWhitespace is enabled then
            the <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="uri">
            A string representing the URI of the file to be loaded into a new <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XDocument"/> initialized with the contents of the file referenced
            in the passed uri parameter.  If LoadOptions.PreserveWhitespace is enabled then
            all whitespace will be preserved.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.Stream"/> parameter.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed in
            <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.Stream"/> parameter.  Optionally whitespace handling
            can be preserved.
            </summary>
            <remarks>
            If LoadOptions.PreserveWhitespace is enabled then
            the underlying <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed in
            <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.Stream"/> parameter.  Optionally whitespace handling
            can be preserved.
            </summary>
            <remarks>
            If LoadOptions.PreserveWhitespace is enabled then
            the underlying <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <param name="cancellationToken">
            A cancellation token.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed in
            <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.TextReader"/> parameter.
            </summary>
            <param name="textReader">
            A <see cref="T:System.IO.TextReader"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed in
            <see cref="T:System.IO.TextReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.TextReader"/> parameter.  Optionally whitespace handling
            can be preserved.
            </summary>
            <remarks>
            If LoadOptions.PreserveWhitespace is enabled then
            the <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="textReader">
            A <see cref="T:System.IO.TextReader"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed in
            <see cref="T:System.IO.TextReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.TextReader"/> parameter.  Optionally whitespace handling
            can be preserved.
            </summary>
            <remarks>
            If LoadOptions.PreserveWhitespace is enabled then
            the <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="textReader">
            A <see cref="T:System.IO.TextReader"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <param name="cancellationToken">
            A cancellation token.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed in
            <see cref="T:System.IO.TextReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the
            passed in <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            An <see cref="T:System.Xml.XmlReader"/> containing the XML to be read into the new
            <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed
            in <see cref="T:System.Xml.XmlReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the
            passed in <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            An <see cref="T:System.Xml.XmlReader"/> containing the XML to be read into the new
            <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed
            in <see cref="T:System.Xml.XmlReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the
            passed in <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            An <see cref="T:System.Xml.XmlReader"/> containing the XML to be read into the new
            <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <param name="cancellationToken">
            A cancellation token.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XDocument"/> containing the contents of the passed
            in <see cref="T:System.Xml.XmlReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.InitLoad(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
            <summary>
            Performs shared initialization between Load and LoadAsync.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Parse(System.String)">
            <overloads>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> from a string containing
            XML.  Optionally whitespace can be preserved.
            </overloads>
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> from a string containing
            XML.
            </summary>
            <param name="text">
            A string containing XML.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XDocument"/> containing an XML tree initialized from the
            passed in XML string.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XDocument"/> from a string containing
            XML.  Optionally whitespace can be preserved.
            </summary>
            <remarks>
            This method uses <see cref="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)"/>,
            passing it a StringReader constructed from the passed in XML String. If
            <see cref="F:System.Xml.Linq.LoadOptions.PreserveWhitespace"/> is enabled then
            <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/> is set to false. See
            <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/> for more information on
            whitespace handling.
            </remarks>
            <param name="text">
            A string containing XML.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XDocument"/> containing an XML tree initialized from the
            passed in XML string.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to the passed in <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            The format will be indented by default.  If you want
            no indenting then use the SaveOptions version of Save (see
            <see cref="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)"/>) enabling
            SaveOptions.DisableFormatting
            There is also an option SaveOptions.OmitDuplicateNamespaces for removing duplicate namespace declarations.
            Or instead use the SaveOptions as an annotation on this node or its ancestors, then this method will use those options.
            </remarks>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to output this <see cref="T:System.Xml.Linq.XDocument"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to the passed in <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            The format will be indented by default.  If you want
            no indenting then use the SaveOptions version of Save (see
            <see cref="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)"/>) enabling
            SaveOptions.DisableFormatting
            There is also an option SaveOptions.OmitDuplicateNamespaces for removing duplicate namespace declarations.
            Or instead use the SaveOptions as an annotation on this node or its ancestors, then this method will use those options.
            </remarks>
            <param name="textWriter">
            The <see cref="T:System.IO.TextWriter"/> to output this <see cref="T:System.Xml.Linq.XDocument"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">
            The <see cref="T:System.IO.TextWriter"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to output the XML to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">
            The <see cref="T:System.IO.TextWriter"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Save(System.String)">
            <overloads>
             Outputs this <see cref="T:System.Xml.Linq.XDocument"/>'s underlying XML tree.  The output can
             be saved to a file, a <see cref="T:System.IO.Stream"/>, a <see cref="T:System.IO.TextWriter"/>,
             or an <see cref="T:System.Xml.XmlWriter"/>.  Optionally whitespace can be preserved.
             </overloads>
             <summary>
             Output this <see cref="T:System.Xml.Linq.XDocument"/> to a file.
             </summary>
             <remarks>
             The format will be indented by default.  If you want
             no indenting then use the SaveOptions version of Save (see
             <see cref="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)"/>) enabling
             SaveOptions.DisableFormatting.
             There is also an option SaveOptions.OmitDuplicateNamespaces for removing duplicate namespace declarations.
             Or instead use the SaveOptions as an annotation on this node or its ancestors, then this method will use those options.
             </remarks>
             <param name="fileName">
             The name of the file to output the XML to.
             </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to output the XML to.
            </param>
            <param name="cancellationToken">
            A cancellation token.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/> to a file.
            </summary>
            <param name="fileName">
            The name of the file to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/>'s underlying XML tree to the
            passed in <see cref="T:System.Xml.XmlWriter"/>.
            <seealso cref="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)"/>
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to output the content of this
            <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocument.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XDocument"/>'s underlying XML tree to the
            passed in <see cref="T:System.Xml.XmlWriter"/>.
            <seealso cref="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)"/>
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to output the content of this
            <see cref="T:System.Xml.Linq.XDocument"/>.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="T:System.Xml.Linq.XDocumentType">
            <summary>
            Represents an XML Document Type Definition (DTD).
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes an empty instance of the <see cref="T:System.Xml.Linq.XDocumentType"/> class.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)">
            <summary>
            Initializes an instance of the XDocumentType class
            from another XDocumentType object.
            </summary>
            <param name="other"><see cref="T:System.Xml.Linq.XDocumentType"/> object to copy from.</param>
        </member>
        <member name="P:System.Xml.Linq.XDocumentType.InternalSubset">
            <summary>
            Gets or sets the internal subset for this Document Type Definition (DTD).
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XDocumentType.Name">
            <summary>
            Gets or sets the name for this Document Type Definition (DTD).
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XDocumentType.NodeType">
            <summary>
            Gets the node type for this node.
            </summary>
            <remarks>
            This property will always return XmlNodeType.DocumentType.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XDocumentType.PublicId">
            <summary>
            Gets or sets the public identifier for this Document Type Definition (DTD).
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XDocumentType.SystemId">
            <summary>
            Gets or sets the system identifier for this Document Type Definition (DTD).
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XDocumentType"/> to the passed in <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XDocumentType"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XDocumentType.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XDocumentType"/> to the passed in <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XDocumentType"/> to.
            </param>
            <param name="cancellationToken">
            A cancellation token.
            </param>
        </member>
        <member name="T:System.Xml.Linq.XElement">
            <summary>
            Represents an XML element.
            </summary>
            <remarks>
            An element has an <see cref="T:System.Xml.Linq.XName"/>, optionally one or more attributes,
            and can optionally contain content (see <see cref="M:System.Xml.Linq.XContainer.Nodes"/>.
            An <see cref="T:System.Xml.Linq.XElement"/> can contain the following types of content:
              <list>
                <item>string (Text content)</item>
                <item><see cref="T:System.Xml.Linq.XElement"/></item>
                <item><see cref="T:System.Xml.Linq.XComment"/></item>
                <item><see cref="T:System.Xml.Linq.XProcessingInstruction"/></item>
              </list>
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XElement.EmptySequence">
            <summary>
            Gets an empty collection of elements.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
            <summary>
            Initializes a new instance of the XElement class with the specified name.
            </summary>
            <param name="name">
            The name of the element.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Initializes a new instance of the XElement class with the specified name and content.
            </summary>
            <param name="name">
            The element name.
            </param>
            <param name="content">The initial contents of the element.</param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Initializes a new instance of the XElement class with the specified name and content.
            </summary>
            <param name="name">
            The element name.
            </param>
            <param name="content">
            The initial content of the element.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the XElement class from another XElement object.
            </summary>
            <param name="other">
            Another element that will be copied to this element.
            </param>
            <remarks>
            This constructor makes a deep copy from one element to another.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
            <summary>
            Initializes an XElement object from an <see cref="T:System.Xml.Linq.XStreamingElement"/> object.
            </summary>
            <param name="other">
            The <see cref="T:System.Xml.Linq.XStreamingElement"/> object whose value will be used
            to initialize the new element.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.Save(System.String)">
            <overloads>
             Outputs this <see cref="T:System.Xml.Linq.XElement"/>'s underlying XML tree.  The output can
             be saved to a file, a <see cref="T:System.IO.Stream"/>, a <see cref="T:System.IO.TextWriter"/>,
             or an <see cref="T:System.Xml.XmlWriter"/>.  Optionally whitespace can be preserved.
             </overloads>
             <summary>
             Output this <see cref="T:System.Xml.Linq.XElement"/> to a file.
             </summary>
             <remarks>
             The format will be indented by default.  If you want
             no indenting then use the SaveOptions version of Save (see
             <see cref="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)"/>) enabling
             SaveOptions.DisableFormatting.
             There is also an option SaveOptions.OmitDuplicateNamespaces for removing duplicate namespace declarations.
             Or instead use the SaveOptions as an annotation on this node or its ancestors, then this method will use those options.
             </remarks>
             <param name="fileName">
             The name of the file to output the XML to.
             </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to a file.
            </summary>
            <param name="fileName">
            The name of the file to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="P:System.Xml.Linq.XElement.FirstAttribute">
            <summary>
            Gets the first attribute of an element.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XElement.HasAttributes">
            <summary>
            Gets a value indicating whether the element has at least one attribute.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XElement.HasElements">
            <summary>
            Gets a value indicating whether the element has at least one child element.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XElement.IsEmpty">
            <summary>
            Gets a value indicating whether the element contains no content.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XElement.LastAttribute">
            <summary>
            Gets the last attribute of an element.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XElement.Name">
            <summary>
            Gets the name of this element.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XElement.NodeType">
            <summary>
            Gets the node type for this node.
            </summary>
            <remarks>
            This property will always return XmlNodeType.Text.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XElement.Value">
            <summary>
            Gets the text contents of this element.
            </summary>
            <remarks>
            If there is text content interspersed with nodes (mixed content) then the text content
            will be concatenated and returned.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf">
            <overloads>
            Returns this <see cref="T:System.Xml.Linq.XElement"/> and all of it's ancestors up
            to the root node.  Optionally an <see cref="T:System.Xml.Linq.XName"/> can be passed
            in to target a specific ancestor(s).
            <seealso cref="M:System.Xml.Linq.XNode.Ancestors"/>
            </overloads>
            <summary>
            Returns this <see cref="T:System.Xml.Linq.XElement"/> and all of it's ancestors up to
            the root node.
            <seealso cref="M:System.Xml.Linq.XNode.Ancestors"/>
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing all of
            this <see cref="T:System.Xml.Linq.XElement"/>'s ancestors up to the root node (including
            this <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
            <summary>
            Returns the ancestor(s) of this <see cref="T:System.Xml.Linq.XElement"/> with the matching
            <see cref="T:System.Xml.Linq.XName"/>. If this <see cref="T:System.Xml.Linq.XElement"/>'s <see cref="T:System.Xml.Linq.XName"/>
            matches the <see cref="T:System.Xml.Linq.XName"/> passed in then it will be included in the
            resulting <see cref="T:System.Collections.IEnumerable"/> or <see cref="T:System.Xml.Linq.XElement"/>.
            <seealso cref="M:System.Xml.Linq.XNode.Ancestors"/>
            </summary>
            <param name="name">
            The <see cref="T:System.Xml.Linq.XName"/> of the target ancestor.
            </param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the
            ancestors of this <see cref="T:System.Xml.Linq.XElement"/> with a matching <see cref="T:System.Xml.Linq.XName"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> associated with this <see cref="T:System.Xml.Linq.XElement"/> that has this
            <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="name">
            The <see cref="T:System.Xml.Linq.XName"/> of the <see cref="T:System.Xml.Linq.XAttribute"/> to get.
            </param>
            <returns>
            The <see cref="T:System.Xml.Linq.XAttribute"/> with the <see cref="T:System.Xml.Linq.XName"/> passed in.  If there is no <see cref="T:System.Xml.Linq.XAttribute"/>
            with this <see cref="T:System.Xml.Linq.XName"/> then null is returned.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Attributes">
            <overloads>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/> associated with this <see cref="T:System.Xml.Linq.XElement"/>.  Optionally
            an <see cref="T:System.Xml.Linq.XName"/> can be given to target a specific <see cref="T:System.Xml.Linq.XAttribute"/>(s).
            </overloads>
            <summary>
            Returns all of the <see cref="T:System.Xml.Linq.XAttribute"/>s associated with this <see cref="T:System.Xml.Linq.XElement"/>.
            <seealso cref="M:System.Xml.Linq.XContainer.Elements"/>
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XAttribute"/> containing all of the <see cref="T:System.Xml.Linq.XAttribute"/>s
            associated with this <see cref="T:System.Xml.Linq.XElement"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
            <summary>
            Returns the <see cref="T:System.Xml.Linq.XAttribute"/>(s) associated with this <see cref="T:System.Xml.Linq.XElement"/> that has the passed
            in <see cref="T:System.Xml.Linq.XName"/>.
            <seealso cref="M:System.Xml.Linq.XElement.Attributes"/>
            </summary>
            <param name="name">
            The <see cref="T:System.Xml.Linq.XName"/> of the targeted <see cref="T:System.Xml.Linq.XAttribute"/>.
            </param>
            <returns>
            The <see cref="T:System.Xml.Linq.XAttribute"/>(s) with the matching
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
            <summary>
            Get the self and descendant nodes for an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf">
            <overloads>
            Returns this <see cref="T:System.Xml.Linq.XElement"/> and all of it's descendants.  Overloads allow
            specification of a type of descendant to return, or a specific <see cref="T:System.Xml.Linq.XName"/>
            of a descendant <see cref="T:System.Xml.Linq.XElement"/> to match.
            </overloads>
            <summary>
            Returns this <see cref="T:System.Xml.Linq.XElement"/> and all of it's descendant <see cref="T:System.Xml.Linq.XElement"/>s
            as an <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/>.
            <seealso cref="M:System.Xml.Linq.XElement.DescendantsAndSelf"/>
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing this <see cref="T:System.Xml.Linq.XElement"/>
            and all of it's descendants.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
            <summary>
            Returns the descendants of this <see cref="T:System.Xml.Linq.XElement"/> that have a matching <see cref="T:System.Xml.Linq.XName"/>
            to the one passed in, including, potentially, this <see cref="T:System.Xml.Linq.XElement"/>.
            <seealso cref="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)"/>
            </summary>
            <param name="name">
            The <see cref="T:System.Xml.Linq.XName"/> of the descendant <see cref="T:System.Xml.Linq.XElement"/> that is being targeted.
            </param>
            <returns>
            An <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Xml.Linq.XElement"/> containing all of the descendant
            <see cref="T:System.Xml.Linq.XElement"/>s that have this <see cref="T:System.Xml.Linq.XName"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.GetDefaultNamespace">
            <summary>
            Returns the default <see cref="T:System.Xml.Linq.XNamespace"/> of an <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
            <summary>
            Get the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement"/>
            in its document context.
            </summary>
            <param name="prefix">The namespace prefix to look up</param>
            <returns>An <see cref="T:System.Xml.Linq.XNamespace"/> for the namespace bound to the prefix</returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
            <summary>
            Get the prefix associated with a namespace for an element in its context.
            </summary>
            <param name="ns">The <see cref="T:System.Xml.Linq.XNamespace"/> for which to get a prefix</param>
            <returns>The namespace prefix string</returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Load(System.String)">
            <overloads>
            The Load method provides multiple strategies for creating a new
            <see cref="T:System.Xml.Linq.XElement"/> and initializing it from a data source containing
            raw XML.  Load from a file (passing in a URI to the file), an
            <see cref="T:System.IO.Stream"/>, a <see cref="T:System.IO.TextReader"/>, or an
            <see cref="T:System.Xml.XmlReader"/>.  Note:  Use <see cref="M:System.Xml.Linq.XDocument.Parse(System.String)"/>
            to create an <see cref="T:System.Xml.Linq.XDocument"/> from a string containing XML.
            <seealso cref="M:System.Xml.Linq.XDocument.Load(System.String)" />
            <seealso cref="M:System.Xml.Linq.XElement.Parse(System.String)"/>
            </overloads>
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> based on the contents of the file
            referenced by the URI parameter passed in.  Note: Use
            <see cref="M:System.Xml.Linq.XElement.Parse(System.String)"/> to create an <see cref="T:System.Xml.Linq.XElement"/> from
            a string containing XML.
            <seealso cref="M:System.Xml.XmlReader.Create(System.String)"/>
            <seealso cref="M:System.Xml.Linq.XElement.Parse(System.String)"/>
            <seealso cref="M:System.Xml.Linq.XDocument.Parse(System.String)"/>
            </summary>
            <remarks>
            This method uses the <see cref="M:System.Xml.XmlReader.Create(System.String)"/> method to create
            an <see cref="T:System.Xml.XmlReader"/> to read the raw XML into the underlying
            XML tree.
            </remarks>
            <param name="uri">
            A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XElement"/> initialized with the contents of the file referenced
            in the passed in uri parameter.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> based on the contents of the file
            referenced by the URI parameter passed in.  Optionally, whitespace can be preserved.
            <see cref="M:System.Xml.XmlReader.Create(System.String)"/>
            <seealso cref="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)"/>
            </summary>
            <remarks>
            This method uses the <see cref="M:System.Xml.XmlReader.Create(System.String)"/> method to create
            an <see cref="T:System.Xml.XmlReader"/> to read the raw XML into an underlying
            XML tree. If LoadOptions.PreserveWhitespace is enabled then
            the <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="uri">
            A string representing the URI of the file to be loaded into a new <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XElement"/> initialized with the contents of the file referenced
            in the passed uri parameter.  If LoadOptions.PreserveWhitespace is enabled then
            significant whitespace will be preserved.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.Stream"/> parameter.
            </summary>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed in
            <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.Stream"/> parameter.  Optionally whitespace handling
            can be preserved.
            </summary>
            <remarks>
            If LoadOptions.PreserveWhitespace is enabled then
            the <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed in
            <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.LoadAsync(System.IO.Stream,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.Stream"/> parameter.  Optionally whitespace handling
            can be preserved.
            </summary>
            <remarks>
            If LoadOptions.PreserveWhitespace is enabled then
            the <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="stream">
            A <see cref="T:System.IO.Stream"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <param name="cancellationToken">
            A cancellation token.</param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed in
            <see cref="T:System.IO.Stream"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.TextReader"/> parameter.
            </summary>
            <param name="textReader">
            A <see cref="T:System.IO.TextReader"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed in
            <see cref="T:System.IO.TextReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.TextReader"/> parameter.  Optionally whitespace handling
            can be preserved.
            </summary>
            <remarks>
            If LoadOptions.PreserveWhitespace is enabled then
            the <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="textReader">
            A <see cref="T:System.IO.TextReader"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed in
            <see cref="T:System.IO.TextReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.LoadAsync(System.IO.TextReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> and initialize its underlying XML tree using
            the passed <see cref="T:System.IO.TextReader"/> parameter.  Optionally whitespace handling
            can be preserved.
            </summary>
            <remarks>
            If LoadOptions.PreserveWhitespace is enabled then
            the <see cref="T:System.Xml.XmlReaderSettings"/> property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>
            is set to false.
            </remarks>
            <param name="textReader">
            A <see cref="T:System.IO.TextReader"/> containing the raw XML to read into the newly
            created <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <param name="cancellationToken">
            A cancellation token.</param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed in
            <see cref="T:System.IO.TextReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the
            passed in <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            An <see cref="T:System.Xml.XmlReader"/> containing the XML to be read into the new
            <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed
            in <see cref="T:System.Xml.XmlReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the
            passed in <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            An <see cref="T:System.Xml.XmlReader"/> containing the XML to be read into the new
            <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed
            in <see cref="T:System.Xml.XmlReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.LoadAsync(System.Xml.XmlReader,System.Xml.Linq.LoadOptions,System.Threading.CancellationToken)">
            <summary>
            Create a new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the
            passed in <see cref="T:System.Xml.XmlReader"/>.
            </summary>
            <param name="reader">
            An <see cref="T:System.Xml.XmlReader"/> containing the XML to be read into the new
            <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <param name="cancellationToken">
            A cancellation token.</param>
            <returns>
            A new <see cref="T:System.Xml.Linq.XElement"/> containing the contents of the passed
            in <see cref="T:System.Xml.XmlReader"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Parse(System.String)">
            <overloads>
            Parses a string containing XML into an <see cref="T:System.Xml.Linq.XElement"/>.  Optionally
            whitespace can be preserved.
            </overloads>
            <summary>
            Parses a string containing XML into an <see cref="T:System.Xml.Linq.XElement"/>.
            </summary>
            <remarks>
            The XML must contain only one root node.
            </remarks>
            <param name="text">
            A string containing the XML to parse into an <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XElement"/> created from the XML string passed in.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
            <summary>
            Parses a string containing XML into an <see cref="T:System.Xml.Linq.XElement"/> and optionally
            preserves the Whitespace. See <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/>.
            </summary>
            <remarks>
            <list>
            <item>The XML must contain only one root node.</item>
            <item>
            If LoadOptions.PreserveWhitespace is enabled the underlying
            <see cref="T:System.Xml.XmlReaderSettings"/>'
            property <see cref="P:System.Xml.XmlReaderSettings.IgnoreWhitespace"/> will be set to false.
            </item>
            </list>
            </remarks>
            <param name="text">
            A string containing the XML to parse into an <see cref="T:System.Xml.Linq.XElement"/>.
            </param>
            <param name="options">
            A set of <see cref="T:System.Xml.Linq.LoadOptions"/>.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XElement"/> created from the XML string passed in.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.RemoveAll">
            <summary>
            Removes content and attributes from this <see cref="T:System.Xml.Linq.XElement"/>.
            <seealso cref="M:System.Xml.Linq.XElement.RemoveAttributes"/>
            <seealso cref="M:System.Xml.Linq.XContainer.RemoveNodes"/>
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XElement.RemoveAttributes">
            <summary>
            Removes that attributes of this <see cref="T:System.Xml.Linq.XElement"/>.
            <seealso cref="M:System.Xml.Linq.XElement.RemoveAll"/>
            <seealso cref="M:System.Xml.Linq.XElement.RemoveAttributes"/>
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
            <overloads>
            Replaces the child nodes and the attributes of this element with the
            specified content. The content can be simple content, a collection of
            content objects, a parameter list of content objects, or null.
            </overloads>
            <summary>
            Replaces the children nodes and the attributes of this element with the specified content.
            </summary>
            <param name="content">
            The content that will replace the child nodes and attributes of this element.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
            <summary>
            Replaces the children nodes and the attributes of this element with the specified content.
            </summary>
            <param name="content">
            A parameter list of content objects.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
            <overloads>
            Replaces the attributes of this element with the specified content.
            The content can be simple content, a collection of
            content objects, a parameter list of content objects, or null.
            </overloads>
            <summary>
            Replaces the attributes of this element with the specified content.
            </summary>
            <param name="content">
            The content that will replace the attributes of this element.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
            <summary>
            Replaces the attributes of this element with the specified content.
            </summary>
            <param name="content">
            A parameter list of content objects.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to the passed in <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            The format will be indented by default.  If you want
            no indenting then use the SaveOptions version of Save (see
            <see cref="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)"/>) enabling
            SaveOptions.DisableFormatting.
            There is also an option SaveOptions.OmitDuplicateNamespaces for removing duplicate namespace declarations.
            Or instead use the SaveOptions as an annotation on this node or its ancestors, then this method will use those options.
            </remarks>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to output this <see cref="T:System.Xml.Linq.XElement"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.SaveAsync(System.IO.Stream,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">
            The <see cref="T:System.IO.Stream"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to the passed in <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <remarks>
            The format will be indented by default.  If you want
            no indenting then use the SaveOptions version of Save (see
            <see cref="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)"/>) enabling
            SaveOptions.DisableFormatting.
            There is also an option SaveOptions.OmitDuplicateNamespaces for removing duplicate namespace declarations.
            Or instead use the SaveOptions as an annotation on this node or its ancestors, then this method will use those options.
            </remarks>
            <param name="textWriter">
            The <see cref="T:System.IO.TextWriter"/> to output this <see cref="T:System.Xml.Linq.XElement"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">
            The <see cref="T:System.IO.TextWriter"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.SaveAsync(System.IO.TextWriter,System.Xml.Linq.SaveOptions,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">
            The <see cref="T:System.IO.TextWriter"/> to output the XML to.
            </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to output the XML to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.SaveAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Output this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to output the XML to.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
            <summary>
            Sets the value of an attribute. The value is assigned to the attribute with the given
            name. If no attribute with the given name exists, a new attribute is added. If the
            value is null, the attribute with the given name, if any, is deleted.
            <seealso cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)"/>
            <seealso cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)"/>
            <seealso cref="M:System.Xml.Linq.XElement.SetValue(System.Object)"/>
            </summary>
            <param name="name">
            The name of the attribute whose value to change.
            </param>
            <param name="value">
            The value to assign to the attribute. The attribute is deleted if the value is null.
            Otherwise, the value is converted to its string representation and assigned to the
            <see cref="P:System.Xml.Linq.XElement.Value"/> property of the attribute.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the value is an instance of <see cref="T:System.Xml.Linq.XObject"/>.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
            <summary>
            Sets the value of a child element. The value is assigned to the first child element
            with the given name. If no child element with the given name exists, a new child
            element is added. If the value is null, the first child element with the given name,
            if any, is deleted.
            <seealso cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)"/>
            <seealso cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)"/>
            <seealso cref="M:System.Xml.Linq.XElement.SetValue(System.Object)"/>
            </summary>
            <param name="name">
            The name of the child element whose value to change.
            </param>
            <param name="value">
            The value to assign to the child element. The child element is deleted if the value
            is null. Otherwise, the value is converted to its string representation and assigned
            to the <see cref="P:System.Xml.Linq.XElement.Value"/> property of the child element.
            </param>
            <exception cref="T:System.ArgumentException">
            Thrown if the value is an instance of <see cref="T:System.Xml.Linq.XObject"/>.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.SetValue(System.Object)">
            <summary>
            Sets the value of this element.
            <seealso cref="M:System.Xml.Linq.XAttribute.SetValue(System.Object)"/>
            <seealso cref="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)"/>
            <seealso cref="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)"/>
            </summary>
            <param name="value">
            The value to assign to this element. The value is converted to its string representation
            and assigned to the <see cref="P:System.Xml.Linq.XElement.Value"/> property.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified value is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XElement"/> to the passed in <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XElement"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XElement"/> to the passed in <see cref="T:System.Xml.XmlTextWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlTextWriter"/> to write this <see cref="T:System.Xml.Linq.XElement"/> to.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.String"/>.
            </summary>
            <remarks>
            If the <see cref="T:System.Xml.Linq.XElement"/> is a subtree (an <see cref="T:System.Xml.Linq.XElement"/>
            that has <see cref="T:System.Xml.Linq.XElement"/> children.  The concatenated string
            value of all of the <see cref="T:System.Xml.Linq.XElement"/>'s text and descendants
            text is returned.
            </remarks>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to a string.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Boolean"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Boolean"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the element does not contain a valid boolean value.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.Boolean"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Boolean"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Boolean"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the element does not contain a valid boolean value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Int32"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Int32"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Int32"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the element does not contain a valid integer value.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Int32"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Int32"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Int32"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid integer value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.UInt32"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.UInt32"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.UInt32"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid unsigned integer value.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.UInt32"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.UInt32"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.UInt32"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid unsigned integer value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.Int64"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Int64"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Int64"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the element does not contain a valid long integer value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.Int64"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Int64"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Int64"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid long integer value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.UInt64"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.UInt64"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.UInt64"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid unsigned long integer value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.UInt64"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.UInt64"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.UInt64"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid unsigned long integer value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.Single"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Single"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Single"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid float value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Single"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Single"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Single"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid float value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.Double"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Double"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Double"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid double value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Double"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Double"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Double"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid double value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.Decimal"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Decimal"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Decimal"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid decimal value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Decimal"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Decimal"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Decimal"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid decimal value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.DateTime"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.DateTime"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid <see cref="T:System.DateTime"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.DateTime"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.DateTime"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.DateTime"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid <see cref="T:System.DateTime"/> value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.DateTimeOffset"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.DateTimeOffset"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid <see cref="T:System.DateTimeOffset"/> value.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.DateTimeOffset"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.DateTimeOffset"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.DateTimeOffset"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid <see cref="T:System.DateTimeOffset"/> value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.TimeSpan"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.TimeSpan"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid <see cref="T:System.TimeSpan"/> value.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.TimeSpan"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.TimeSpan"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.TimeSpan"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid <see cref="T:System.TimeSpan"/> value.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:System.Guid"/>.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Guid"/>.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Guid"/>.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid guid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the specified element is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
            <summary>
            Cast the value of this <see cref="T:System.Xml.Linq.XElement"/> to an <see cref="T:System.Guid"/>?.
            </summary>
            <param name="element">
            The <see cref="T:System.Xml.Linq.XElement"/> to cast to <see cref="T:System.Guid"/>?.
            </param>
            <returns>
            The content of this <see cref="T:System.Xml.Linq.XElement"/> as a <see cref="T:System.Guid"/>?.
            </returns>
            <exception cref="T:System.FormatException">
            Thrown if the specified element does not contain a valid guid.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This method is obsolete for the IXmlSerializable contract.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates a <see cref="T:System.Xml.Linq.XElement"/> from its XML representation.
            </summary>
            <param name="reader">
            The <see cref="T:System.Xml.XmlReader"/> stream from which the <see cref="T:System.Xml.Linq.XElement"/>
            is deserialized.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts a <see cref="T:System.Xml.Linq.XElement"/> into its XML representation.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> stream to which the <see cref="T:System.Xml.Linq.XElement"/>
            is serialized.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XElement.ReadElementFromImpl(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
            <summary>
            Shared implementation between ReadElementFrom / ReadElementFromAsync.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XHashtable`1">
             <summary>
             This is a thread-safe hash table which maps string keys to values of type TValue.  It is assumed that the string key is embedded in the hashed value
             and can be extracted via a call to ExtractKeyDelegate (in order to save space and allow cleanup of key if value is released due to a WeakReference
             TValue releasing its target).
             </summary>
             <remarks>
             All methods on this class are thread-safe.
            
             When the hash table fills up, it is necessary to resize it and rehash all contents.  Because this can be expensive,
             a lock is taken, and one thread is responsible for the resize.  Other threads which need to add values must wait
             for the resize to be complete.
            
             Thread-Safety Notes
             ===================
            
             1. Because performance and scalability are such a concern with the global name table, I have avoided the use of
                BIFALOs (Big Fat Locks).  Instead, I use CompareExchange, Interlocked.Increment, memory barriers, atomic state objects,
                etc. to avoid locks.  Any changes to code which accesses these variables should be carefully reviewed and tested,
                as it can be *very* tricky.  In particular, if you don't understand the CLR memory model or if you don't know
                what a memory barrier is, DON'T attempt to modify this code.  A good discussion of these topics can be found at
                <![CDATA[http://discuss.develop.com/archives/wa.exe?A2=ind0203B&L=DOTNET&P=R375]]>.
            
             2. Because I am not sure if the CLR spec has changed since versions 1.0/1.1, I am assuming the weak memory model that
                is described in the ECMA spec, in which normal writes can be reordered.  This means I must introduce more memory
                barriers than otherwise would be necessary.
            
             3. There are several thread-safety concepts and patterns I utilize in this code:
                  a. Publishing -- There are a small number of places where state is exposed, or published, to multiple threads.
                                   These places are marked with the comment "PUBLISH", and are key locations to consider when
                                   reviewing the code for thread-safety.
            
                  b. Immutable objects -- Immutable objects initialize their fields once in their constructor and then never modify
                                          them again.  As long as care is taken to ensure that initial field values are visible to
                                          other threads before publishing the immutable object itself, immutable objects are
                                          completely thread-safe.
            
                  c. Atomic state objects -- Locks typically are taken when several pieces of state must be updated atomically.  In
                                             other words, there is a window in which state is inconsistent, and that window must
                                             be protected from view by locking.  However, if a new object is created each time state
                                             changes (or state changes substantially), then during creation the new object is only
                                             visible to a single thread.  Once construction is complete, an assignment (guaranteed
                                             atomic) can replace the old state object with the new state object, thus publishing a
                                             consistent view to all threads.
            
                  d. Retry -- When several threads contend over shared state which only one is allowed to possess, it is possible
                              to avoid locking by repeatedly attempting to acquire the shared state.  The CompareExchange method
                              is useful for atomically ensuring that only one thread succeeds, and other threads are notified that
                              they must retry.
            
             4. All variables which can be written by multiple threads are marked "SHARED STATE".
             </remarks>
        </member>
        <member name="T:System.Xml.Linq.XHashtable`1.ExtractKeyDelegate">
            <summary>
            Prototype of function which is called to extract a string key value from a hashed value.
            Returns null if the hashed value is invalid (e.g. value has been released due to a WeakReference TValue being cleaned up).
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.#ctor(System.Xml.Linq.XHashtable{`0}.ExtractKeyDelegate,System.Int32)">
            <summary>
            Construct a new XHashtable with the specified starting capacity.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.TryGetValue(System.String,System.Int32,System.Int32,`0@)">
            <summary>
            Get an existing value from the hash table.  Return false if no such value exists.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.Add(`0)">
            <summary>
            Add a value to the hash table, hashed based on a string key embedded in it.  Return the added value (may be a different object than "value").
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XHashtable`1.XHashtableState">
            <summary>
            This class contains all the hash table state.  Rather than creating a bucket object, buckets are structs
            packed into an array.  Buckets with the same truncated hash code are linked into lists, so that collisions
            can be disambiguated.
            </summary>
            <remarks>
            Note that the "buckets" and "entries" arrays are never themselves written by multiple threads.  Instead, the
            *contents* of the array are written by multiple threads.  Resizing the hash table does not modify these variables,
            or even modify the contents of these variables.  Instead, resizing makes an entirely new XHashtableState object
            in which all entries are rehashed.  This strategy allows reader threads to continue finding values in the "old"
            XHashtableState, while writer threads (those that need to add a new value to the table) are blocked waiting for
            the resize to complete.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.XHashtableState.#ctor(System.Xml.Linq.XHashtable{`0}.ExtractKeyDelegate,System.Int32)">
            <summary>
            Construct a new XHashtableState object with the specified capacity.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.XHashtableState.Resize">
            <summary>
            If this table is not full, then just return "this".  Otherwise, create and return a new table with
            additional capacity, and rehash all values in the table.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.XHashtableState.TryGetValue(System.String,System.Int32,System.Int32,`0@)">
            <summary>
            Attempt to find "key" in the table.  If the key exists, return the associated value in "value" and
            return true.  Otherwise return false.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.XHashtableState.TryAdd(`0,`0@)">
             <summary>
             Attempt to add "value" to the table, hashed by an embedded string key.  If a value having the same key already exists,
             then return the existing value in "newValue".  Otherwise, return the newly added value in "newValue".
            
             If the hash table is full, return false.  Otherwise, return true.
             </summary>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.XHashtableState.FindEntry(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Searches a linked list of entries, beginning at "entryIndex".  If "entryIndex" is 0, then search starts at a hash bucket instead.
            Each entry in the list is matched against the (hashCode, key, index, count) key.  If a matching entry is found, then its
            entry index is returned in "entryIndex" and true is returned.  If no matching entry is found, then the index of the last entry
            in the list (or 0 if list is empty) is returned in "entryIndex" and false is returned.
            </summary>
            <remarks>
            This method has the side effect of removing invalid entries from the list as it is traversed.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XHashtable`1.XHashtableState.ComputeHashCode(System.String,System.Int32,System.Int32)">
            <summary>
            Compute hash code for a string key (index, count substring of "key").  The algorithm used is the same on used in NameTable.cs in System.Xml.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XHashtable`1.XHashtableState.Entry">
            <summary>
            Hash table entry.  The "Value" and "HashCode" fields are filled during initialization, and are never changed.  The "Next"
            field is updated when a new entry is chained to this one, and therefore care must be taken to ensure that updates to
            this field are thread-safe.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XObjectChange">
            <summary>
            Specifies the event type when an event is raised for an <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
        </member>
        <member name="F:System.Xml.Linq.XObjectChange.Add">
            <summary>
            An <see cref="T:System.Xml.Linq.XObject"/> has been or will be added to an <see cref="T:System.Xml.Linq.XContainer"/>.
            </summary>
        </member>
        <member name="F:System.Xml.Linq.XObjectChange.Remove">
            <summary>
            An <see cref="T:System.Xml.Linq.XObject"/> has been or will be removed from an <see cref="T:System.Xml.Linq.XContainer"/>.
            </summary>
        </member>
        <member name="F:System.Xml.Linq.XObjectChange.Name">
            <summary>
            An <see cref="T:System.Xml.Linq.XObject"/> has been or will be renamed.
            </summary>
        </member>
        <member name="F:System.Xml.Linq.XObjectChange.Value">
            <summary>
            The value of an <see cref="T:System.Xml.Linq.XObject"/> has been or will be changed.
            There is a special case for elements. Change in the serialization
            of an empty element (either from an empty tag to start/end tag
            pair or vice versa) raises this event.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.LoadOptions">
            <summary>
            Specifies a set of options for Load().
            </summary>
        </member>
        <member name="F:System.Xml.Linq.LoadOptions.None">
            <summary>Default options.</summary>
        </member>
        <member name="F:System.Xml.Linq.LoadOptions.PreserveWhitespace">
            <summary>Preserve whitespace.</summary>
        </member>
        <member name="F:System.Xml.Linq.LoadOptions.SetBaseUri">
            <summary>Set the BaseUri property.</summary>
        </member>
        <member name="F:System.Xml.Linq.LoadOptions.SetLineInfo">
            <summary>Set the IXmlLineInfo.</summary>
        </member>
        <member name="T:System.Xml.Linq.SaveOptions">
            <summary>
            Specifies a set of options for Save().
            </summary>
        </member>
        <member name="F:System.Xml.Linq.SaveOptions.None">
            <summary>Default options.</summary>
        </member>
        <member name="F:System.Xml.Linq.SaveOptions.DisableFormatting">
            <summary>Disable formatting.</summary>
        </member>
        <member name="F:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces">
            <summary>Remove duplicate namespace declarations.</summary>
        </member>
        <member name="T:System.Xml.Linq.ReaderOptions">
            <summary>
            Specifies a set of options for CreateReader().
            </summary>
        </member>
        <member name="F:System.Xml.Linq.ReaderOptions.None">
            <summary>Default options.</summary>
        </member>
        <member name="F:System.Xml.Linq.ReaderOptions.OmitDuplicateNamespaces">
            <summary>Remove duplicate namespace declarations.</summary>
        </member>
        <member name="T:System.Xml.Linq.XName">
            <summary>
            Represents a name of an XML element or attribute. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XName.#ctor(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Constructor, internal so that external users must go through the Get() method to create an XName.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XName.LocalName">
            <summary>
            Gets the local (unqualified) part of the name.
            </summary>
            <seealso cref="P:System.Xml.Linq.XName.Namespace"/>
        </member>
        <member name="P:System.Xml.Linq.XName.Namespace">
            <summary>
            Gets the namespace of the name.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XName.NamespaceName">
            <summary>
            Gets the namespace name part of the name.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XName.ToString">
            <summary>
            Returns the expanded XML name in the format: {namespaceName}localName.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XName.Get(System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.Linq.XName"/> object created from the specified expanded name.
            </summary>
            <param name="expandedName">
            A string containing an expanded XML name in the format: {namespace}localname.
            </param>
            <returns>
            An <see cref="T:System.Xml.Linq.XName"/> object constructed from the specified expanded name.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XName.Get(System.String,System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.Linq.XName"/> object from a local name and a namespace.
            </summary>
            <param name="localName">A local (unqualified) name.</param>
            <param name="namespaceName">An XML namespace.</param>
            <returns>An XName object created from the specified local name and namespace.</returns>
        </member>
        <member name="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
            <summary>
            Converts a string formatted as an expanded XML name ({namespace}localname) to an XName object.
            </summary>
            <param name="expandedName">A string containing an expanded XML name in the format: {namespace}localname.</param>
            <returns>An XName object constructed from the expanded name.</returns>
        </member>
        <member name="M:System.Xml.Linq.XName.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Xml.Linq.XName"/> is equal to the current <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="obj">The XName to compare to the current XName.</param>
            <returns>
            true if the specified <see cref="T:System.Xml.Linq.XName"/> is equal to the current XName; otherwise false.
            </returns>
            <remarks>
            For two <see cref="T:System.Xml.Linq.XName"/> objects to be equal, they must have the same expanded name.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XName.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:System.Xml.Linq.XName"/>. GetHashCode is suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName"/> are equal.
            </summary>
            <param name="left">The first XName to compare.</param>
            <param name="right">The second XName to compare.</param>
            <returns>true if left and right are equal; otherwise false.</returns>
            <remarks>
            This overload is included to enable the comparison between
            an instance of XName and string.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName"/> are not equal.
            </summary>
            <param name="left">The first XName to compare.</param>
            <param name="right">The second XName to compare.</param>
            <returns>true if left and right are not equal; otherwise false.</returns>
            <remarks>
            This overload is included to enable the comparison between
            an instance of XName and string.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)">
            <summary>
            Indicates whether the current <see cref="T:System.Xml.Linq.XName"/> is equal to
            the specified <see cref="T:System.Xml.Linq.XName"/>
            </summary>
            <param name="other">The <see cref="T:System.Xml.Linq.XName"/> to compare with the
            current <see cref="T:System.Xml.Linq.XName"/></param>
            <returns>
            Returns true if the current <see cref="T:System.Xml.Linq.XName"/> is equal to
            the specified <see cref="T:System.Xml.Linq.XName"/>. Returns false otherwise.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to
            serialize the <see cref="T:System.Xml.Linq.XName"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data</param>
            <param name="context">The destination for this serialization</param>
        </member>
        <member name="T:System.Xml.Linq.XNamespace">
            <summary>
            Represents an XML namespace. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.#ctor(System.String)">
            <summary>
            Constructor, internal so that external users must go through the Get() method to create an XNamespace.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XNamespace.NamespaceName">
            <summary>
            Gets the namespace name of the namespace.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.GetName(System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.Linq.XName"/> object created from the current instance and the specified local name.
            </summary>
            <remarks>
            The returned <see cref="T:System.Xml.Linq.XName"/> object is guaranteed to be atomic (i.e. the only one in the system for this
            particular expanded name).
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.ToString">
            <summary>
            Returns the namespace name of this <see cref="T:System.Xml.Linq.XNamespace"/>.
            </summary>
            <returns>A string value containing the namespace name.</returns>
        </member>
        <member name="P:System.Xml.Linq.XNamespace.None">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNamespace"/> object that corresponds to no namespace.
            </summary>
            <remarks>
            If an element or attribute is in no namespace, its namespace
            will be set to the namespace returned by this property.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XNamespace.Xml">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNamespace"/> object that corresponds to the xml uri (http://www.w3.org/XML/1998/namespace).
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XNamespace.Xmlns">
            <summary>
            Gets the <see cref="T:System.Xml.Linq.XNamespace"/> object that corresponds to the xmlns uri (http://www.w3.org/2000/xmlns/).
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.Get(System.String)">
            <summary>
            Gets an <see cref="T:System.Xml.Linq.XNamespace"/> created from the specified namespace name.
            </summary>
            <remarks>
            The returned <see cref="T:System.Xml.Linq.XNamespace"/> object is guaranteed to be atomic
            (i.e. the only one in the system for that particular namespace name).
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
            <summary>
            Converts a string containing a namespace name to an <see cref="T:System.Xml.Linq.XNamespace"/>.
            </summary>
            <param name="namespaceName">A string containing the namespace name.</param>
            <returns>An <see cref="T:System.Xml.Linq.XNamespace"/> constructed from the namespace name string.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
            <summary>
            Combines an <see cref="T:System.Xml.Linq.XNamespace"/> object with a local name to create an <see cref="T:System.Xml.Linq.XName"/>.
            </summary>
            <param name="ns">The namespace for the expanded name.</param>
            <param name="localName">The local name for the expanded name.</param>
            <returns>The new XName constructed from the namespace and local name.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace"/> is equal to the current <see cref="T:System.Xml.Linq.XNamespace"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Xml.Linq.XNamespace"/> to compare to the current <see cref="T:System.Xml.Linq.XNamespace"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Xml.Linq.XNamespace"/> is equal to the current <see cref="T:System.Xml.Linq.XNamespace"/>; otherwise false.
            </returns>
            <remarks>
            For two <see cref="T:System.Xml.Linq.XNamespace"/> objects to be equal they must have the same
            namespace name.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.GetHashCode">
            <summary>
            Serves as a hash function for <see cref="T:System.Xml.Linq.XNamespace"/>. GetHashCode is suitable
            for use in hashing algorithms and data structures like a hash table.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace"/> are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace"/> to compare.</param>
            <returns>true if left and right are equal; otherwise false.</returns>
            <remarks>
            This overload is included to enable the comparison between
            an instance of <see cref="T:System.Xml.Linq.XNamespace"/> and string.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
            <summary>
            Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace"/> are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace"/> to compare.</param>
            <returns>true if left and right are not equal; otherwise false.</returns>
            <remarks>
            This overload is included to enable the comparison between
            an instance of <see cref="T:System.Xml.Linq.XNamespace"/> and string.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.GetName(System.String,System.Int32,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Xml.Linq.XName"/> created from this XNamespace <see cref="T:System.Xml.Linq.XName"/> and a portion of the passed in
            local name parameter.  The returned <see cref="T:System.Xml.Linq.XName"/> object is guaranteed to be atomic (i.e. the only one in the system for
            this particular expanded name).
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.Get(System.String,System.Int32,System.Int32)">
            <summary>
            Returns an <see cref="T:System.Xml.Linq.XNamespace"/> created from a portion of the passed in namespace name parameter.  The returned <see cref="T:System.Xml.Linq.XNamespace"/>
            object is guaranteed to be atomic (i.e. the only one in the system for this particular namespace name).
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.ExtractLocalName(System.Xml.Linq.XName)">
            <summary>
            This function is used by the <see cref="T:System.Xml.Linq.XHashtable`1"/> to extract the local name part from an <see cref="T:System.Xml.Linq.XName"/>.  The hash table
            uses the local name as the hash key.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.ExtractNamespace(System.WeakReference{System.Xml.Linq.XNamespace})">
            <summary>
            This function is used to extract the XNamespace that the WeakReference is referencing.
            In cases where the XNamespace has been cleaned up, this function returns null.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNamespace.EnsureNamespace(System.WeakReference{System.Xml.Linq.XNamespace}@,System.String)">
            <summary>
            Ensure that an XNamespace object for 'namespaceName' has been atomically created.  In other words, all outstanding
            references to this particular namespace, on any thread, must all be to the same object.  Care must be taken,
            since other threads can be concurrently calling this method, and the target of a WeakReference can be cleaned up
            at any time by the GC.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XNode">
            <summary>
            Represents nodes (elements, comments, document type, processing instruction,
            and text nodes) in the XML tree.
            </summary>
            <remarks>
            Nodes in the XML tree consist of objects of the following classes:
            <see cref="T:System.Xml.Linq.XElement"/>,
            <see cref="T:System.Xml.Linq.XComment"/>,
            <see cref="T:System.Xml.Linq.XDocument"/>,
            <see cref="T:System.Xml.Linq.XProcessingInstruction"/>,
            <see cref="T:System.Xml.Linq.XText"/>,
            <see cref="T:System.Xml.Linq.XDocumentType"/>
            Note that an <see cref="T:System.Xml.Linq.XAttribute"/> is not an <see cref="T:System.Xml.Linq.XNode"/>.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XNode.NextNode">
            <summary>
            Gets the next sibling node of this node.
            </summary>
            <remarks>
            If this property does not have a parent, or if there is no next node,
            then this property returns null.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XNode.PreviousNode">
            <summary>
            Gets the previous sibling node of this node.
            </summary>
            <remarks>
            If this property does not have a parent, or if there is no previous node,
            then this property returns null.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XNode.DocumentOrderComparer">
            <summary>
            Gets a comparer that can compare the relative position of two nodes.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XNode.EqualityComparer">
            <summary>
            Gets a comparer that can compare two nodes for value equality.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)">
            <overloads>
            Adds the specified content immediately after this node. The
            content can be simple content, a collection of
            content objects, a parameter list of content objects,
            or null.
            </overloads>
            <summary>
            Adds the specified content immediately after this node.
            </summary>
            <param name="content">
            A content object containing simple content or a collection of content objects
            to be added after this node.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the parent is null.
            </exception>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])">
            <summary>
            Adds the specified content immediately after this node.
            </summary>
            <param name="content">
            A parameter list of content objects.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the parent is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)">
            <overloads>
            Adds the specified content immediately before this node. The
            content can be simple content, a collection of
            content objects, a parameter list of content objects,
            or null.
            </overloads>
            <summary>
            Adds the specified content immediately before this node.
            </summary>
            <param name="content">
            A content object containing simple content or a collection of content objects
            to be added after this node.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the parent is null.
            </exception>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])">
            <summary>
            Adds the specified content immediately before this node.
            </summary>
            <param name="content">
            A parameter list of content objects.
            </param>
            <remarks>
            See XContainer.Add(object content) for details about the content that can be added
            using this method.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the parent is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XNode.Ancestors">
            <overloads>
            Returns an collection of the ancestor elements for this node.
            Optionally an node name can be specified to filter for a specific ancestor element.
            </overloads>
            <summary>
            Returns a collection of the ancestor elements of this node.
            </summary>
            <returns>
            The ancestor elements of this node.
            </returns>
            <remarks>
            This method will not return itself in the results.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)">
            <summary>
            Returns a collection of the ancestor elements of this node with the specified name.
            </summary>
            <param name="name">
            The name of the ancestor elements to find.
            </param>
            <returns>
            A collection of the ancestor elements of this node with the specified name.
            </returns>
            <remarks>
            This method will not return itself in the results.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
            <summary>
            Compares two nodes to determine their relative XML document order.
            </summary>
            <param name="n1">First node to compare.</param>
            <param name="n2">Second node to compare.</param>
            <returns>
            0 if the nodes are equal; -1 if n1 is before n2; 1 if n1 is after n2.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the two nodes do not share a common ancestor.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XNode.CreateReader">
            <summary>
            Creates an <see cref="T:System.Xml.XmlReader"/> for the node.
            </summary>
            <returns>An <see cref="T:System.Xml.XmlReader"/> that can be used to read the node and its descendants.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlReader"/> for the node.
            </summary>
            <param name="readerOptions">
            Options to be used for the returned reader. These override the default usage of annotations from the tree.
            </param>
            <returns>An <see cref="T:System.Xml.XmlReader"/> that can be used to read the node and its descendants.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.NodesAfterSelf">
            <summary>
            Returns a collection of the sibling nodes after this node, in document order.
            </summary>
            <remarks>
            This method only includes sibling nodes in the returned collection.
            </remarks>
            <returns>The nodes after this node.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.NodesBeforeSelf">
            <summary>
            Returns a collection of the sibling nodes before this node, in document order.
            </summary>
            <remarks>
            This method only includes sibling nodes in the returned collection.
            </remarks>
            <returns>The nodes after this node.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf">
            <summary>
            Returns a collection of the sibling element nodes after this node, in document order.
            </summary>
            <remarks>
            This method only includes sibling element nodes in the returned collection.
            </remarks>
            <returns>The element nodes after this node.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)">
            <summary>
            Returns a collection of the sibling element nodes with the specified name
            after this node, in document order.
            </summary>
            <remarks>
            This method only includes sibling element nodes in the returned collection.
            </remarks>
            <returns>The element nodes after this node with the specified name.</returns>
            <param name="name">The name of elements to enumerate.</param>
        </member>
        <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf">
            <summary>
            Returns a collection of the sibling element nodes before this node, in document order.
            </summary>
            <remarks>
            This method only includes sibling element nodes in the returned collection.
            </remarks>
            <returns>The element nodes before this node.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)">
            <summary>
            Returns a collection of the sibling element nodes with the specified name
            before this node, in document order.
            </summary>
            <remarks>
            This method only includes sibling element nodes in the returned collection.
            </remarks>
            <returns>The element nodes before this node with the specified name.</returns>
            <param name="name">The name of elements to enumerate.</param>
        </member>
        <member name="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)">
            <summary>
            Determines if the current node appears after a specified node
            in terms of document order.
            </summary>
            <param name="node">The node to compare for document order.</param>
            <returns>True if this node appears after the specified node; false if not.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)">
            <summary>
            Determines if the current node appears before a specified node
            in terms of document order.
            </summary>
            <param name="node">The node to compare for document order.</param>
            <returns>True if this node appears before the specified node; false if not.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:System.Xml.Linq.XNode"/> from an <see cref="T:System.Xml.XmlReader"/>.
            The runtime type of the node is determined by the node type
            (<see cref="P:System.Xml.Linq.XObject.NodeType"/>) of the first node encountered
            in the reader.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode"/>.</param>
            <returns>An <see cref="T:System.Xml.Linq.XNode"/> that contains the nodes read from the reader.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <see cref="T:System.Xml.XmlReader"/> is not positioned on a recognized node type.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XNode.ReadFromAsync(System.Xml.XmlReader,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:System.Xml.Linq.XNode"/> from an <see cref="T:System.Xml.XmlReader"/>.
            The runtime type of the node is determined by the node type
            (<see cref="P:System.Xml.Linq.XObject.NodeType"/>) of the first node encountered
            in the reader.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode"/>.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An <see cref="T:System.Xml.Linq.XNode"/> that contains the nodes read from the reader.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the <see cref="T:System.Xml.XmlReader"/> is not positioned on a recognized node type.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XNode.Remove">
            <summary>
            Removes this XNode from the underlying XML tree.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the parent is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)">
            <overloads>
            Replaces this node with the specified content. The
            content can be simple content, a collection of
            content objects, a parameter list of content objects,
            or null.
            </overloads>
            <summary>
            Replaces the content of this <see cref="T:System.Xml.Linq.XNode"/>.
            </summary>
            <param name="content">Content that replaces this node.</param>
        </member>
        <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])">
            <summary>
            Replaces this node with the specified content.
            </summary>
            <param name="content">Content that replaces this node.</param>
        </member>
        <member name="M:System.Xml.Linq.XNode.ToString">
            <summary>
            Provides the formatted XML text representation.
            You can use the SaveOptions as an annotation on this node or its ancestors, then this method will use those options.
            </summary>
            <returns>A formatted XML string.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)">
            <summary>
            Provides the XML text representation.
            </summary>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <returns>An XML string.</returns>
        </member>
        <member name="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
            <summary>
            Compares the values of two nodes, including the values of all descendant nodes.
            </summary>
            <param name="n1">The first node to compare.</param>
            <param name="n2">The second node to compare.</param>
            <returns>true if the nodes are equal, false otherwise.</returns>
            <remarks>
            A null node is equal to another null node but unequal to a non-null
            node. Two <see cref="T:System.Xml.Linq.XNode"/> objects of different types are never equal. Two
            <see cref="T:System.Xml.Linq.XText"/> nodes are equal if they contain the same text. Two
            <see cref="T:System.Xml.Linq.XElement"/> nodes are equal if they have the same tag name, the same
            set of attributes with the same values, and, ignoring comments and processing
            instructions, contain two equal length sequences of equal content nodes.
            Two <see cref="T:System.Xml.Linq.XDocument"/>s are equal if their root nodes are equal. Two
            <see cref="T:System.Xml.Linq.XComment"/> nodes are equal if they contain the same comment text.
            Two <see cref="T:System.Xml.Linq.XProcessingInstruction"/> nodes are equal if they have the same
            target and data. Two <see cref="T:System.Xml.Linq.XDocumentType"/> nodes are equal if the have the
            same name, public id, system id, and internal subset.</remarks>
        </member>
        <member name="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Write the current node to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write the current node into.</param>
        </member>
        <member name="M:System.Xml.Linq.XNode.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Write the current node to an <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to write the current node into.</param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="T:System.Xml.Linq.XNodeDocumentOrderComparer">
            <summary>
            Contains functionality to compare nodes for their document order.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
            <summary>
            Compares two nodes to determine their relative XML document order.
            </summary>
            <param name="x">The first node to compare.</param>
            <param name="y">The second node to compare.</param>
            <returns>
            0 if the nodes are equal;
            -1 if x is before y;
            1 if x is after y.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the two nodes do not share a common ancestor.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            Compares two nodes to determine their relative XML document order.
            </summary>
            <param name="x">The first node to compare.</param>
            <param name="y">The second node to compare.</param>
            <returns>
            0 if the nodes are equal;
            -1 if x is before y;
            1 if x is after y.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the two nodes do not share a common ancestor.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown if either of the two nodes are not derived from XNode.
            </exception>
        </member>
        <member name="T:System.Xml.Linq.XNodeEqualityComparer">
            <summary>
            Contains functionality to compare nodes for value equality.
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
            <summary>
            Compares the values of two nodes.
            </summary>
            <param name="x">The first node to compare.</param>
            <param name="y">The second node to compare.</param>
            <returns>true if the nodes are equal, false otherwise.</returns>
            <remarks>
            A null node is equal to another null node but unequal to a non-null
            node. Two <see cref="T:System.Xml.Linq.XNode"/>s of different types are never equal. Two
            <see cref="T:System.Xml.Linq.XText"/> nodes are equal if they contain the same text. Two
            <see cref="T:System.Xml.Linq.XElement"/> nodes are equal if they have the same tag name, the same
            set of attributes with the same values, and, ignoring comments and processing
            instructions, contain two equal length sequences of pairwise equal content nodes.
            Two <see cref="T:System.Xml.Linq.XDocument"/>s are equal if their root nodes are equal. Two
            <see cref="T:System.Xml.Linq.XComment"/> nodes are equal if they contain the same comment text.
            Two <see cref="T:System.Xml.Linq.XProcessingInstruction"/> nodes are equal if they have the same
            target and data. Two <see cref="T:System.Xml.Linq.XDocumentType"/> nodes are equal if the have the
            same name, public id, system id, and internal subset.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)">
            <summary>
            Returns a hash code based on an <see cref="T:System.Xml.Linq.XNode"/> objects value.
            </summary>
            <param name="obj">The node to hash.</param>
            <returns>A value-based hash code for the node.</returns>
            <remarks>
            The <see cref="T:System.Xml.Linq.XNode"/> class's implementation of <see cref="M:System.Object.GetHashCode"/>
            is based on the referential identity of the node. This method computes a
            hash code based on the value of the node.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
            <summary>
            Compares the values of two nodes.
            </summary>
            <param name="x">The first node to compare.</param>
            <param name="y">The second node to compare.</param>
            <returns>true if the nodes are equal, false otherwise.</returns>
            <remarks>
            A null node is equal to another null node but unequal to a non-null
            node. Two <see cref="T:System.Xml.Linq.XNode"/>s of different types are never equal. Two
            <see cref="T:System.Xml.Linq.XText"/> nodes are equal if they contain the same text. Two
            <see cref="T:System.Xml.Linq.XElement"/> nodes are equal if they have the same tag name, the same
            set of attributes with the same values, and, ignoring comments and processing
            instructions, contain two equal length sequences of pairwise equal content nodes.
            Two <see cref="T:System.Xml.Linq.XDocument"/>s are equal if their root nodes are equal. Two
            <see cref="T:System.Xml.Linq.XComment"/> nodes are equal if they contain the same comment text.
            Two <see cref="T:System.Xml.Linq.XProcessingInstruction"/> nodes are equal if they have the same
            target and data. Two <see cref="T:System.Xml.Linq.XDocumentType"/> nodes are equal if the have the
            same name, public id, system id, and internal subset.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
            <summary>
            Returns a hash code based on a node's value.
            </summary>
            <param name="obj">The node to hash.</param>
            <returns>A value-based hash code for the node.</returns>
            <remarks>
            The <see cref="T:System.Xml.Linq.XNode"/> class's implementation of <see cref="M:System.Object.GetHashCode"/>
            is based on the referential identity of the node. This method computes a
            hash code based on the value of the node.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XNodeReader.IsDuplicateNamespaceAttribute(System.Xml.Linq.XAttribute)">
            <summary>
            Determines if the specified attribute would be a duplicate namespace declaration
             - one which we already reported on some ancestor, so it's not necessary to report it here
            </summary>
            <param name="candidateAttribute">The attribute to test.</param>
            <returns>true if the attribute is a duplicate namespace declaration attribute</returns>
        </member>
        <member name="M:System.Xml.Linq.XNodeReader.GetFirstNonDuplicateNamespaceAttribute(System.Xml.Linq.XAttribute)">
            <summary>
            Finds a first attribute (starting with the parameter) which is not a duplicate namespace attribute
            </summary>
            <param name="candidate">The attribute to start with</param>
            <returns>The first attribute which is not a namespace attribute or null if the end of attributes has bean reached</returns>
        </member>
        <member name="T:System.Xml.Linq.XObject">
            <summary>
            Represents a node or an attribute in an XML tree.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XObject.BaseUri">
            <summary>
            Get the BaseUri for this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XObject.Document">
            <summary>
            Gets the XDocument object for this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XObject.NodeType">
            <summary>
            Gets the node type for this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XObject.Parent">
            <summary>
            Gets the parent <see cref="T:System.Xml.Linq.XElement"/> of this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
            <remarks>
            If this <see cref="T:System.Xml.Linq.XObject"/> has no parent <see cref="T:System.Xml.Linq.XElement"/>, this property returns null.
            </remarks>
        </member>
        <member name="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:System.Xml.Linq.XObject.Annotation(System.Type)">
            <summary>
            Returns the first annotation object of the specified type from the list of annotations
            of this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
            <param name="type">The type of the annotation to retrieve.</param>
            <returns>
            The first matching annotation object, or null
            if no annotation is the specified type.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XObject.Annotation``1">
            <summary>
            Returns the first annotation object of the specified type from the list of annotations
            of this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>
            The first matching annotation object, or null if no annotation
            is the specified type.
            </returns>
        </member>
        <member name="M:System.Xml.Linq.XObject.Annotations(System.Type)">
            <summary>
            Returns an enumerable collection of annotations of the specified type
            for this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
            <param name="type">The type of the annotations to retrieve.</param>
            <returns>An enumerable collection of annotations for this XObject.</returns>
        </member>
        <member name="M:System.Xml.Linq.XObject.Annotations``1">
            <summary>
            Returns an enumerable collection of annotations of the specified type
            for this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An enumerable collection of annotations for this XObject.</returns>
        </member>
        <member name="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
            <param name="type">The type of annotations to remove.</param>
        </member>
        <member name="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject"/>.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="E:System.Xml.Linq.XObject.Changed">
            <summary>
            Occurs when this <see cref="T:System.Xml.Linq.XObject"/> or any of its descendants have changed.
            </summary>
        </member>
        <member name="E:System.Xml.Linq.XObject.Changing">
            <summary>
            Occurs when this <see cref="T:System.Xml.Linq.XObject"/> or any of its descendants are about to change.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XObject.GetSaveOptionsFromAnnotations">
            <summary>
            Walks the tree starting with "this" node and returns first annotation of type <see cref="T:System.Xml.Linq.SaveOptions"/>
              found in the ancestors.
            </summary>
            <returns>The effective <see cref="T:System.Xml.Linq.SaveOptions"/> for this <see cref="T:System.Xml.Linq.XObject"/></returns>
        </member>
        <member name="T:System.Xml.Linq.XObjectChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:System.Xml.Linq.XObject.Changing"/> and <see cref="E:System.Xml.Linq.XObject.Changed"/> events.
            </summary>
        </member>
        <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Add">
            <summary>
            Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Add"/> change event.
            </summary>
        </member>
        <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Remove">
            <summary>
            Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Remove"/> change event.
            </summary>
        </member>
        <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Name">
            <summary>
            Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Name"/> change event.
            </summary>
        </member>
        <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Value">
            <summary>
            Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Value"/> change event.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XObjectChangeEventArgs.#ctor(System.Xml.Linq.XObjectChange)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Xml.Linq.XObjectChangeEventArgs"/> class.
            </summary>
        </member>
        <member name="P:System.Xml.Linq.XObjectChangeEventArgs.ObjectChange">
            <summary>
            Gets the type (<see cref="T:System.Xml.Linq.XObjectChange"/>) of change.
            </summary>
        </member>
        <member name="T:System.Xml.Linq.XProcessingInstruction">
            <summary>
            Represents an XML processing instruction.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.String,System.String)">
            <summary>
            Initializes a new XML Processing Instruction from the specified target and string data.
            </summary>
            <param name="target">
            The target application for this <see cref="T:System.Xml.Linq.XProcessingInstruction"/>.
            </param>
            <param name="data">
            The string data that comprises the <see cref="T:System.Xml.Linq.XProcessingInstruction"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if either the target or data parameter are null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.Xml.Linq.XProcessingInstruction)">
            <summary>
            Initializes a new XML processing instruction by copying its target and data
            from another XML processing instruction.
            </summary>
            <param name="other">XML processing instruction to copy from.</param>
        </member>
        <member name="P:System.Xml.Linq.XProcessingInstruction.Data">
            <summary>
            Gets or sets the string value of this processing instruction.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the value set is null.
            </exception>
        </member>
        <member name="P:System.Xml.Linq.XProcessingInstruction.NodeType">
            <summary>
            Gets the node type for this node.
            </summary>
            <remarks>
            This property will always return XmlNodeType.ProcessingInstruction.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XProcessingInstruction.Target">
            <summary>
            Gets or sets a string representing the target application for this processing instruction.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown if the value set is null.
            </exception>
        </member>
        <member name="M:System.Xml.Linq.XProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes this <see cref="T:System.Xml.Linq.XProcessingInstruction"/> to the passed in <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XProcessingInstruction"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XProcessingInstruction.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Writes this <see cref="T:System.Xml.Linq.XProcessingInstruction"/> to the passed in <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XProcessingInstruction"/> to.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
        </member>
        <member name="T:System.Xml.Linq.XStreamingElement">
            <summary>
            Represents a class that allows elements to be streamed
            on input and output.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
            <summary>
             Creates a <see cref="T:System.Xml.Linq.XStreamingElement"/> node with a given name
            </summary>
            <param name="name">The name to assign to the new <see cref="T:System.Xml.Linq.XStreamingElement"/> node</param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
            <summary>
            Creates a <see cref="T:System.Xml.Linq.XStreamingElement"/> node with a given name and content
            </summary>
            <param name="name">The name to assign to the new <see cref="T:System.Xml.Linq.XStreamingElement"/> node</param>
            <param name="content">The content to assign to the new <see cref="T:System.Xml.Linq.XStreamingElement"/> node</param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
            <summary>
            Creates a <see cref="T:System.Xml.Linq.XStreamingElement"/> node with a given name and content
            </summary>
            <param name="name">The name to assign to the new <see cref="T:System.Xml.Linq.XStreamingElement"/> node</param>
            <param name="content">An array containing content to assign to the new <see cref="T:System.Xml.Linq.XStreamingElement"/> node</param>
        </member>
        <member name="P:System.Xml.Linq.XStreamingElement.Name">
            <summary>
            Gets or sets the name of this streaming element.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
            <summary>
            Add content to an <see cref="T:System.Xml.Linq.XStreamingElement"/>
            </summary>
            <param name="content">Object containing content to add</param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
            <summary>
            Add content to an <see cref="T:System.Xml.Linq.XStreamingElement"/>
            </summary>
            <param name="content">array of objects containing content to add</param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
            <summary>
            Save the contents of an <see cref="T:System.Xml.Linq.XStreamingElement"/> to a <see cref="T:System.IO.Stream"/>
            with formatting.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to write to </param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
            <summary>
            Save the contents of an <see cref="T:System.Xml.Linq.XStreamingElement"/> to a <see cref="T:System.IO.Stream"/>,
            optionally formatting.
            </summary>
            <param name="stream"><see cref="T:System.IO.Stream"/> to write to </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
            <summary>
            Save the contents of an <see cref="T:System.Xml.Linq.XStreamingElement"/> to a text writer
            with formatting.
            </summary>
            <param name="textWriter"><see cref="T:System.IO.TextWriter"/> to write to </param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
            <summary>
            Save the contents of an <see cref="T:System.Xml.Linq.XStreamingElement"/> to a text writer
            optionally formatting.
            </summary>
            <param name="textWriter"><see cref="T:System.IO.TextWriter"/> to write to </param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
            <summary>
            Save the contents of an <see cref="T:System.Xml.Linq.XStreamingElement"/> to an XML writer, not preserving whitespace
            </summary>
            <param name="writer"><see cref="T:System.Xml.XmlWriter"/> to write to </param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
            <summary>
            Save an <see cref="T:System.Xml.Linq.XStreamingElement"/> to a file with formatting.
            </summary>
            <param name="fileName">Name of file to write content to</param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
            <summary>
            Save an <see cref="T:System.Xml.Linq.XStreamingElement"/> to a file, optionally formatting.
            </summary>
            <param name="fileName">Name of file to write content to</param>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the output is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.ToString">
            <summary>
            Get the XML content of an <see cref="T:System.Xml.Linq.XStreamingElement"/> as a
            formatted string.
            </summary>
            <returns>The XML text as a formatted string</returns>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
            <summary>
            Gets the XML content of this streaming element as a string.
            </summary>
            <param name="options">
            If SaveOptions.DisableFormatting is enabled the content is not indented.
            If SaveOptions.OmitDuplicateNamespaces is enabled duplicate namespace declarations will be removed.
            </param>
            <returns>An XML string</returns>
        </member>
        <member name="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XStreamingElement"/> to an <see cref="T:System.Xml.XmlWriter"/>
            </summary>
            <param name="writer"></param>
        </member>
        <member name="T:System.Xml.Linq.XText">
            <summary>
            Represents a text node.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the XText class.
            </summary>
            <param name="value">The string that contains the value of the text node.</param>
        </member>
        <member name="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
            <summary>
            Initializes a new instance of the XText class from another XText object.
            </summary>
            <param name="other">The text node to copy from.</param>
        </member>
        <member name="P:System.Xml.Linq.XText.NodeType">
            <summary>
            Gets the node type for this node.
            </summary>
            <remarks>
            This property will always return XmlNodeType.Text.
            </remarks>
        </member>
        <member name="P:System.Xml.Linq.XText.Value">
            <summary>
            Gets or sets the value of this node.
            </summary>
        </member>
        <member name="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XText"/> to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XText"/> to.
            </param>
        </member>
        <member name="M:System.Xml.Linq.XText.WriteToAsync(System.Xml.XmlWriter,System.Threading.CancellationToken)">
            <summary>
            Write this <see cref="T:System.Xml.Linq.XText"/> to the given <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">
            The <see cref="T:System.Xml.XmlWriter"/> to write this <see cref="T:System.Xml.Linq.XText"/> to.
            </param>
            <param name="cancellationToken">
            A cancellation token.
            </param>
        </member>
        <member name="T:System.Xml.Schema.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)">
            <summary>
            Gets the schema information that has been assigned to the <see cref="T:System.Xml.Linq.XElement"/> as a result of schema validation.
            </summary>
            <param name="source">Extension point</param>
        </member>
        <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)">
            <summary>
            Gets the schema information that has been assigned to the <see cref="T:System.Xml.Linq.XAttribute"/> as a result of schema validation.
            </summary>
            <param name="source">Extension point</param>
        </member>
        <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Validate a <see cref="T:System.Xml.Linq.XDocument"/>
            </summary>
            <param name="source">Extension point</param>
            <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet"/> used for validation</param>
            <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"/>
            that receives schema validation warnings and errors encountered during schema
            validation</param>
        </member>
        <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
            <summary>
            Validate a <see cref="T:System.Xml.Linq.XDocument"/>
            </summary>
            <param name="source">Extension point</param>
            <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet"/> used for validation</param>
            <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"/>
            that receives schema validation warnings and errors encountered during schema
            validation</param>
            <param name="addSchemaInfo">If enabled the <see cref="T:System.Xml.Linq.XDocument"/> and the corresponding
            subtree is augmented with PSVI in the form of <see cref="T:System.Xml.Schema.IXmlSchemaInfo"/> annotations,
            default attributes and default element values</param>
        </member>
        <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Validate a <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="source">Extension point</param>
            <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaElement"/> or
            <see cref="T:System.Xml.Schema.XmlSchemaType"/> object used to initialize the partial validation
            context</param>
            <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet"/> used for validation</param>
            <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"/> that
            receives schema validation warnings and errors encountered during schema
            validation</param>
        </member>
        <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
            <summary>
            Validate a <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="source">Extension point</param>
            <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaElement"/> or
            <see cref="T:System.Xml.Schema.XmlSchemaType"/> object used to initialize the partial validation
            context</param>
            <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet"/> used for validation</param>
            <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"/> that
            receives schema validation warnings and errors encountered during schema
            validation</param>
            <param name="addSchemaInfo">If enabled the <see cref="T:System.Xml.Linq.XElement"/> and the corresponding
            subtree is augmented with PSVI in the form of <see cref="T:System.Xml.Schema.IXmlSchemaInfo"/> annotations,
            default attributes and default element values</param>
        </member>
        <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
            <summary>
            Validate a <see cref="T:System.Xml.Linq.XAttribute"/>
            </summary>
            <param name="source">Extension point</param>
            <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaAttribute"/> or
            <see cref="T:System.Xml.Schema.XmlSchemaType"/> object used to initialize the partial validation
            context</param>
            <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet"/> used for validation</param>
            <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"/> that
            receives schema validation warnings and errors encountered during schema
            validation</param>
        </member>
        <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
            <summary>
            Validate a <see cref="T:System.Xml.Linq.XAttribute"/>
            </summary>
            <param name="source">Extension point</param>
            <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaAttribute"/> or
            <see cref="T:System.Xml.Schema.XmlSchemaType"/> object used to initialize the partial validation
            context</param>
            <param name="schemas">The <see cref="T:System.Xml.Schema.XmlSchemaSet"/> used for validation</param>
            <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler"/> that
            receives schema validation warnings and errors encountered during schema
            validation</param>
            <param name="addSchemaInfo">If enabled the <see cref="T:System.Xml.Linq.XAttribute"/> is augmented with PSVI
            in the form of <see cref="T:System.Xml.Schema.IXmlSchemaInfo"/> annotations, default attributes and
            default element values</param>
        </member>
        <member name="T:System.Xml.XPath.Extensions">
            <summary>
            Extension methods
            </summary>
        </member>
        <member name="M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)">
            <summary>
            Creates an <see cref="T:System.Xml.XPath.XPathNavigator"/> for a given <see cref="T:System.Xml.Linq.XNode"/>
            </summary>
            <param name="node">Extension point <see cref="T:System.Xml.Linq.XNode"/></param>
            <returns>An <see cref="T:System.Xml.XPath.XPathNavigator"/></returns>
        </member>
        <member name="M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)">
            <summary>
            Creates an <see cref="T:System.Xml.XPath.XPathNavigator"/> for a given <see cref="T:System.Xml.Linq.XNode"/>
            </summary>
            <param name="node">Extension point <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="nameTable">The <see cref="T:System.Xml.XmlNameTable"/> to be used by
            the <see cref="T:System.Xml.XPath.XPathNavigator"/></param>
            <returns>An <see cref="T:System.Xml.XPath.XPathNavigator"/></returns>
        </member>
        <member name="M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)">
            <summary>
            Evaluates an XPath expression
            </summary>
            <param name="node">Extension point <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="expression">The XPath expression</param>
            <returns>The result of evaluating the expression which can be typed as bool, double, string or
            IEnumerable</returns>
        </member>
        <member name="M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Evaluates an XPath expression
            </summary>
            <param name="node">Extension point <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="expression">The XPath expression</param>
            <param name="resolver">A <see cref="T:System.Xml.IXmlNamespaceResolver"> for the namespace
            prefixes used in the XPath expression</see></param>
            <returns>The result of evaluating the expression which can be typed as bool, double, string or
            IEnumerable</returns>
        </member>
        <member name="M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)">
            <summary>
            Select an <see cref="T:System.Xml.Linq.XElement"/> using a XPath expression
            </summary>
            <param name="node">Extension point <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="expression">The XPath expression</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"> or null</see></returns>
        </member>
        <member name="M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Select an <see cref="T:System.Xml.Linq.XElement"/> using a XPath expression
            </summary>
            <param name="node">Extension point <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="expression">The XPath expression</param>
            <param name="resolver">A <see cref="T:System.Xml.IXmlNamespaceResolver"/> for the namespace
            prefixes used in the XPath expression</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"> or null</see></returns>
        </member>
        <member name="M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)">
            <summary>
            Select a set of <see cref="T:System.Xml.Linq.XElement"/> using a XPath expression
            </summary>
            <param name="node">Extension point <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="expression">The XPath expression</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> corresponding to the resulting set of elements</returns>
        </member>
        <member name="M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
            <summary>
            Select a set of <see cref="T:System.Xml.Linq.XElement"/> using a XPath expression
            </summary>
            <param name="node">Extension point <see cref="T:System.Xml.Linq.XNode"/></param>
            <param name="expression">The XPath expression</param>
            <param name="resolver">A <see cref="T:System.Xml.IXmlNamespaceResolver"/> for the namespace
            prefixes used in the XPath expression</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> corresponding to the resulting set of elements</returns>
        </member>
        <member name="P:System.SR.Argument_AddAttribute">
            <summary>An attribute cannot be added to content.</summary>
        </member>
        <member name="P:System.SR.Argument_AddNode">
            <summary>A node of type {0} cannot be added to content.</summary>
        </member>
        <member name="P:System.SR.Argument_AddNonWhitespace">
            <summary>Non-whitespace characters cannot be added to content.</summary>
        </member>
        <member name="P:System.SR.Argument_ConvertToString">
            <summary>The argument cannot be converted to a string.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidExpandedName">
            <summary>'{0}' is an invalid expanded name.</summary>
        </member>
        <member name="P:System.SR.Argument_InvalidPIName">
            <summary>'{0}' is an invalid name for a processing instruction.</summary>
        </member>
        <member name="P:System.SR.Argument_MustBeDerivedFrom">
            <summary>The argument must be derived from {0}.</summary>
        </member>
        <member name="P:System.SR.Argument_NamespaceDeclarationPrefixed">
            <summary>The prefix '{0}' cannot be bound to the empty namespace name.</summary>
        </member>
        <member name="P:System.SR.Argument_NamespaceDeclarationXml">
            <summary>The prefix 'xml' is bound to the namespace name 'http://www.w3.org/XML/1998/namespace'. Other prefixes must not be bound to this namespace name, and it must not be declared as the default namespace.</summary>
        </member>
        <member name="P:System.SR.Argument_NamespaceDeclarationXmlns">
            <summary>The prefix 'xmlns' is bound to the namespace name 'http://www.w3.org/2000/xmlns/'. It must not be declared. Other prefixes must not be bound to this namespace name, and it must not be declared as the default namespace.</summary>
        </member>
        <member name="P:System.SR.Argument_XObjectValue">
            <summary>An XObject cannot be used as a value.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_DeserializeInstance">
            <summary>This instance cannot be deserialized.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_DocumentStructure">
            <summary>This operation would create an incorrectly structured document.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_DuplicateAttribute">
            <summary>Duplicate attribute.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_ExpectedEndOfFile">
            <summary>The XmlReader state should be EndOfFile after this operation.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_ExpectedInteractive">
            <summary>The XmlReader state should be Interactive.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_ExpectedNodeType">
            <summary>The XmlReader must be on a node of type {0} instead of a node of type {1}.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_ExternalCode">
            <summary>This operation was corrupted by external code.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_MissingAncestor">
            <summary>A common ancestor is missing.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_MissingParent">
            <summary>The parent is missing.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_MissingRoot">
            <summary>The root element is missing.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_UnexpectedNodeType">
            <summary>The XmlReader should not be on a node of type {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_UnresolvedEntityReference">
            <summary>The XmlReader cannot resolve entity references.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_WriteAttribute">
            <summary>An attribute cannot be written after content.</summary>
        </member>
        <member name="P:System.SR.NotSupported_WriteBase64">
            <summary>This XmlWriter does not support base64 encoded data.</summary>
        </member>
        <member name="P:System.SR.NotSupported_WriteEntityRef">
            <summary>This XmlWriter does not support entity references.</summary>
        </member>
        <member name="P:System.SR.Argument_CreateNavigator">
            <summary>This XPathNavigator cannot be created on a node of type {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_BadNodeType">
            <summary>This operation is not valid on a node of type {0}.</summary>
        </member>
        <member name="P:System.SR.InvalidOperation_UnexpectedEvaluation">
            <summary>The XPath expression evaluated to unexpected type {0}.</summary>
        </member>
        <member name="P:System.SR.NotSupported_MoveToId">
            <summary>This XPathNavigator does not support IDs.</summary>
        </member>
    </members>
</doc>
